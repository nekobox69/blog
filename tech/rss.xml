<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>吾輩の箱庭 Blog</title>
        <link>https://nekobox69.github.io/blog/tech</link>
        <description>吾輩の箱庭 Blog</description>
        <lastBuildDate>Sat, 11 Mar 2023 07:12:42 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[Linux免密登录]]></title>
            <link>https://nekobox69.github.io/blog/tech/Linux免密登录</link>
            <guid>https://nekobox69.github.io/blog/tech/Linux免密登录</guid>
            <pubDate>Sat, 11 Mar 2023 07:12:42 GMT</pubDate>
            <description><![CDATA[生成公钥]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="生成公钥">生成公钥<a href="#生成公钥" class="hash-link" aria-label="生成公钥的直接链接" title="生成公钥的直接链接">​</a></h2><p><code>ssh-keygen -t rsa</code>，一直回车，不用输入任何内容。</p><p>生成的公钥和私钥在<code>~/.ssh</code>下</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="拷贝公钥到目标机器">拷贝公钥到目标机器<a href="#拷贝公钥到目标机器" class="hash-link" aria-label="拷贝公钥到目标机器的直接链接" title="拷贝公钥到目标机器的直接链接">​</a></h2><p>在免密机器上执行</p><p><code>scp -p ~/.ssh/id_rsa.pub root@&lt;remote_ip&gt;:/root/.ssh/authorized_keys</code></p><p>或者登录目标机器执行</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">mkdir</span><span class="token plain"> ~./ssh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">700</span><span class="token plain"> ~./ssh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">id_rsa.pub</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> ~/.ssh/authorized_keys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">600</span><span class="token plain"> ~/.ssh/authorized_keys</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="认证机器">认证机器<a href="#认证机器" class="hash-link" aria-label="认证机器的直接链接" title="认证机器的直接链接">​</a></h2><p><code>ssh-keyscan -H romote_ip &gt;&gt; ~/.ssh/know_hosts</code></p>]]></content:encoded>
            <category>linux</category>
        </item>
        <item>
            <title><![CDATA[mac全局安装npm包报错]]></title>
            <link>https://nekobox69.github.io/blog/tech/mac全局安装npm包报错</link>
            <guid>https://nekobox69.github.io/blog/tech/mac全局安装npm包报错</guid>
            <pubDate>Sat, 11 Mar 2023 07:12:42 GMT</pubDate>
            <description><![CDATA[在Mac上运行npm install -g xxx后，报权限不够的错：]]></description>
            <content:encoded><![CDATA[<p>在Mac上运行<code>npm install -g xxx</code>后，报权限不够的错：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Error: EACCES: permission denied, </span><span class="token function" style="color:#d73a49">mkdir</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'/usr/local/lib/node_modules/xxx'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">   errno: -13,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">   code: </span><span class="token string" style="color:#e3116c">'EACCES'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">   syscall: </span><span class="token string" style="color:#e3116c">'mkdir'</span><span class="token plain">,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">   path: </span><span class="token string" style="color:#e3116c">'/usr/local/lib/node_modules/xxx'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> The operation was rejected by your operating system.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> ERR</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> It is likely you </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"> not have the permissions to access this </span><span class="token function" style="color:#d73a49">file</span><span class="token plain"> as the current user</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>解决方法，修改默认全局路径：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">npm</span><span class="token plain"> config </span><span class="token builtin class-name">set</span><span class="token plain"> prefix </span><span class="token string" style="color:#e3116c">'~/.npm-global'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>添加到环境变量中，<code>.zshrc</code>：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable environment constant" style="color:#36acaa">PATH</span><span class="token operator" style="color:#393A34">=~</span><span class="token plain">/.npm-global/bin:</span><span class="token environment constant" style="color:#36acaa">$PATH</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>生效：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">source</span><span class="token plain"> .zshrc</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Golang调用C代码]]></title>
            <link>https://nekobox69.github.io/blog/tech/Golang调用C代码</link>
            <guid>https://nekobox69.github.io/blog/tech/Golang调用C代码</guid>
            <pubDate>Sat, 11 Mar 2023 06:01:17 GMT</pubDate>
            <description><![CDATA[Golang调用C代码可以有三种方式：]]></description>
            <content:encoded><![CDATA[<p>Golang调用C代码可以有三种方式：</p><ol><li>内嵌C代码到<code>.go</code>文件</li><li>C代码直接放在项目中，和Go代码混编</li><li>引用C编译好的库文件</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="windows平台">windows平台<a href="#windows平台" class="hash-link" aria-label="windows平台的直接链接" title="windows平台的直接链接">​</a></h2><p>Windows上是没有gcc程序的，要想运行C代码，需要先安装gcc。</p><p>推荐使用<a href="https://www.msys2.org/" target="_blank" rel="noopener noreferrer">MSYS2</a></p><p>安装好后，运行以下命令：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">pacman -S --needed base-devel mingw-w64-x86_64-toolchain </span><span class="token function" style="color:#d73a49">make</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>配置<code>Path</code>环境变量：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">D:</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">msys64</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">mingw64</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">bin</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内嵌c代码">内嵌C代码<a href="#内嵌c代码" class="hash-link" aria-label="内嵌C代码的直接链接" title="内嵌C代码的直接链接">​</a></h2><p>main.go</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*#include &lt;stdio.h&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">void say_hello_with_name(char * name){</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    printf("hello %s\n", name);</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">unsigned long * array(unsigned short list[]) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    static unsigned long out[4];</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    for(int i=0; i&lt;4;i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">        out[i] = list[i] + 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">    return &amp;out[0];</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"unsafe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"oscar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint16</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> pwd </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> param </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ushort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> data </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        param </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ushort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ulong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pwd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uint32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ulong</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><code>import "C"</code>和注释之间不能用空行，否则会报错：<code>could not determine kind of name for C.xxx</code></p></blockquote><p>运行后：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello oscar</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="混编">混编<a href="#混编" class="hash-link" aria-label="混编的直接链接" title="混编的直接链接">​</a></h2><p>文件目录：</p><div class="language-txt codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-txt codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">├── demo.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── demo.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── main.go</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>demo.h</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>demo.c</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">&lt;stdio.h&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token macro property directive-hash" style="color:#36acaa">#</span><span class="token macro property directive keyword" style="color:#00009f">include</span><span class="token macro property" style="color:#36acaa"> </span><span class="token macro property string" style="color:#e3116c">"demo.h"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">char</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hello %s\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">short</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">unsigned</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">long</span><span class="token plain"> out</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        out</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>main.go</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#include "demo.h"</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"unsafe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"oscar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint16</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> pwd </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> param </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ushort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> data </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        param </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ushort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ulong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pwd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uint32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ulong</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="库文件">库文件<a href="#库文件" class="hash-link" aria-label="库文件的直接链接" title="库文件的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="windows">Windows<a href="#windows" class="hash-link" aria-label="Windows的直接链接" title="Windows的直接链接">​</a></h3><p>编译库：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -c demo.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ar rcs libdemo.lib demo.o</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">gcc -fPIC -shared demo.c -o libdemo.dll</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>文件目录：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">├── include</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── demo.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── libdemo.lib</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── main.go</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>main.go</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#cgo CFLAGS: -I./include</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#cgo LDFLAGS: -L./linux -llibdemo</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#include "demo.h"</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"unsafe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"oscar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint16</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> pwd </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> param </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ushort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> data </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        param </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ushort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ulong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pwd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uint32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ulong</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="linux-编译库">Linux 编译库<a href="#linux-编译库" class="hash-link" aria-label="Linux 编译库的直接链接" title="Linux 编译库的直接链接">​</a></h3><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">gcc -c demo.c</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ar rcs libdemo.a demo.o</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>文件目录：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">├── include</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── demo.h</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">├── linux</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">│&nbsp;&nbsp; └── libdemo.a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">└── main.go</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>main.go</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#cgo CFLAGS: -I./include</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#cgo LDFLAGS: -L./linux -ldemo</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#include "demo.h"</span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="display:inline-block;color:#999988;font-style:italic"></span><br></span><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"C"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"unsafe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">say_hello_with_name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">CString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"oscar"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    data </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint16</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> pwd </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">uint32</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> param </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ushort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> data </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        param </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ushort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    out </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">array</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">param</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> size</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> i</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        vptr </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Pointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uintptr</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">unsafe</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sizeof</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ulong</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        pwd </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">uint32</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">C</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ulong</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vptr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>Linux系列库文件必须是<code>lib</code>开头，引入的时候不能指定</p></blockquote>]]></content:encoded>
            <category>golang</category>
        </item>
        <item>
            <title><![CDATA[Golang 编译时指定参数]]></title>
            <link>https://nekobox69.github.io/blog/tech/Golang编译时指定参数</link>
            <guid>https://nekobox69.github.io/blog/tech/Golang编译时指定参数</guid>
            <pubDate>Sun, 05 Mar 2023 06:20:47 GMT</pubDate>
            <description><![CDATA[main.go]]></description>
            <content:encoded><![CDATA[<p><code>main.go</code></p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> Version </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Version</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>编译命令：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token assign-left variable" style="color:#36acaa">version</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">`</span><span class="token variable" style="color:#36acaa">go version</span><span class="token variable" style="color:#36acaa">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go build -ldflags </span><span class="token string" style="color:#e3116c">"-X 'main.Version=</span><span class="token string variable" style="color:#36acaa">$version</span><span class="token string" style="color:#e3116c">'"</span><span class="token plain"> ./main.go</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>运行：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">test</span><span class="token plain"> % ./main </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go version go1.20.1 darwin/arm64</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>golang</category>
        </item>
        <item>
            <title><![CDATA[Golang 运行程序瘦身]]></title>
            <link>https://nekobox69.github.io/blog/tech/Golang运行程序瘦身</link>
            <guid>https://nekobox69.github.io/blog/tech/Golang运行程序瘦身</guid>
            <pubDate>Sun, 05 Mar 2023 06:20:47 GMT</pubDate>
            <description><![CDATA[减少编译链接]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="减少编译链接">减少编译链接<a href="#减少编译链接" class="hash-link" aria-label="减少编译链接的直接链接" title="减少编译链接的直接链接">​</a></h2><p>编译时通过减少链接，减少体积：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">go build -ldflags</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"-s -w"</span><span class="token plain"> main.go</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>其中：</p><ul><li><code>-s</code>: Omit the symbol table and debug information.</li><li><code>-w</code>: Omit the DWARF symbol table.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="upx-压缩">UPX 压缩<a href="#upx-压缩" class="hash-link" aria-label="UPX 压缩的直接链接" title="UPX 压缩的直接链接">​</a></h2><p><a href="https://github.com/upx/upx" target="_blank" rel="noopener noreferrer">upx</a> 是一个二进制压缩工具，可以进一步帮助压缩编译出来的二进制文件。</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">upx </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">options</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">file</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>选项：</p><ul><li><p><code>-1[23456789]</code>：不同的压缩级别，数值越高压缩率越高，但耗时更长。对于小于 512 KiB 的文件默认使用<code>-8</code>，其他的默认为<code>-7</code></p><ul><li><p><code>--best</code>：最高压缩级别</p></li><li><p><code>--brute</code>：尝试使用各种压缩方式来获取最高压缩比</p></li><li><p><code>--ultra-brute</code>：尝试使用更多的参数来获取更高的压缩比</p></li></ul></li><li><p><code>-o [file]</code>：将压缩文件保存为 <!-- -->[file]</p></li></ul>]]></content:encoded>
            <category>golang</category>
            <category>压缩</category>
        </item>
        <item>
            <title><![CDATA[Nginx SSL A+ 评级配置]]></title>
            <link>https://nekobox69.github.io/blog/tech/NginxSSLAPlus配置</link>
            <guid>https://nekobox69.github.io/blog/tech/NginxSSLAPlus配置</guid>
            <pubDate>Sun, 05 Mar 2023 06:20:47 GMT</pubDate>
            <content:encoded><![CDATA[<div class="language-nginx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-nginx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        listen       443 ssl http2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        listen       [::]:443 ssl http2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        server_name  _;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        root         /usr/share/nginx/html;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        add_header Strict-Transport-Security "max-age=36000000; includeSubdomains; preload";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ssl_certificate /etc/nginx/certs/server.crt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ssl_certificate_key /etc/nginx/certs/server.key;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # Load configuration files for the default server block.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # include /etc/nginx/default.d/*.conf;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        location / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        error_page 404 /404.html;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            location = /40x.html {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        error_page 500 502 503 504 /50x.html;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            location = /50x.html {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[自定义SpringBoot Starter]]></title>
            <link>https://nekobox69.github.io/blog/tech/自定义SpringBootStarter</link>
            <guid>https://nekobox69.github.io/blog/tech/自定义SpringBootStarter</guid>
            <pubDate>Sun, 05 Mar 2023 05:50:49 GMT</pubDate>
            <description><![CDATA[完整的starter包含两个组件：]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="完整的starter包含两个组件">完整的starter包含两个组件：<a href="#完整的starter包含两个组件" class="hash-link" aria-label="完整的starter包含两个组件：的直接链接" title="完整的starter包含两个组件：的直接链接">​</a></h2><p>autoconfigure：自动配置代码
starter：提供对autoconfigure模块、库以及任何其他通常有用的依赖项的依赖项。简而言之，添加启动器应该足以开始使用该库</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="命名规则">命名规则：<a href="#命名规则" class="hash-link" aria-label="命名规则：的直接链接" title="命名规则：的直接链接">​</a></h2><p>两个模块时，<code>xxx-spring-boot-autoconfigure</code>和<code>xxx-spring-boot-starter</code>
一个模块时，<code>xxx-spring-boot-starter</code>
提供配置key的时候，提供一个命名空间，不要使用spring默认的空间
确保触发元数据生成，以便IDE协助提示。需要查看生成的元数据（META-INF/spring-configuration-metadata.json），以确保key被正确记录</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="autoconfigure模块">autoconfigure模块<a href="#autoconfigure模块" class="hash-link" aria-label="autoconfigure模块的直接链接" title="autoconfigure模块的直接链接">​</a></h2><p>自动配置模块包含开始使用库所需的一切。还可以自定义任何配置接口属性以及自定义初始化组件的回调方法。
META-INF/spring.factories中配置自动配置类，支持多个</p><div class="language-txt codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-txt codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          com.mycorp.libx.autoconfigure.LibXAutoConfiguration,\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          com.mycorp.libx.autoconfigure.LibXWebAutoConfiguration</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>@Configuration 定义在自动装配类上
@ConfigurationProperties 定义在配置key类上
autoconfig的Java类需要有以下注解：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          @Configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          @EnableConfigurationProperties(xxxProperties.class)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Properties类：<code>@ConfigurationProperties(prefix = "me.task")</code>、<code>@NestedConfigurationProperty</code></p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">org.springframework.boot</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">spring-boot-autoconfigure</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">org.springframework.boot</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">spring-boot-configuration-processor</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">optional</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">true</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">optional</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="starter模块">starter模块<a href="#starter模块" class="hash-link" aria-label="starter模块的直接链接" title="starter模块的直接链接">​</a></h2><p>仅有一个pom.xml文件，引入autoconfigure模块及其他必要的依赖</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">dependencies</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">org.springframework.boot</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">spring-boot-starter</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">${spring-boot.version}</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">com.example</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">groupId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">task-spring-boot-autoconfigure</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">artifactId</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">0.0.1</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">version</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">dependency</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">dependencies</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>spring</category>
            <category>springboot</category>
            <category>starter</category>
        </item>
        <item>
            <title><![CDATA[Golang 泛型]]></title>
            <link>https://nekobox69.github.io/blog/tech/Golang泛型</link>
            <guid>https://nekobox69.github.io/blog/tech/Golang泛型</guid>
            <pubDate>Sun, 05 Mar 2023 05:06:07 GMT</pubDate>
            <description><![CDATA[概述]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="概述">概述<a href="#概述" class="hash-link" aria-label="概述的直接链接" title="概述的直接链接">​</a></h2><ul><li>函数可以有额外的类型参数集，用方括号定义：<code>func F[T any](p T) {...}</code></li><li>类型参数在函数内可以当作普通参数使用</li><li>类型通常有类型参数集：<code>type M[T any] []T</code></li><li>每个类型参数都有类型约束，就如每个普通参数都有类型一样：<code>func F[T Constraint](p T) {...}</code></li><li>类型约束是接口类型</li><li>新的预声明符<code>any</code>是一个类型约束，表示任意类型</li><li>类型约束的接口类型可以嵌套其他元素作为类型实参集</li><li><code>T</code>代表任意类型</li><li><code>~T</code>代表继承<code>T</code>的类型</li><li>并集<code>T1 | T2 | ...</code>代表仅限于列出的元素</li><li>泛型函数只能使用约束允许的所有类型支持的操作</li><li>泛型函数或类型需要传入类型实参</li><li>类型推断允许在常见情况下省略函数调用的类型参数</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类型参数">类型参数<a href="#类型参数" class="hash-link" aria-label="类型参数的直接链接" title="类型参数的直接链接">​</a></h2><p>泛型中抽象的数据类型叫类型参数，运行泛型代码的时候类型参数会被类型实参替换。
类型参数与普通非类型函数参数类似，因此应与其他参数一起列出。定义一个额外的可选参数列表来描述类型参数。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Print</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Just an example, not the suggested syntax.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>与常规参数列表不同，在类型参数列表中，类型参数需要名称，这避免了语法上的歧义。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="约束">约束<a href="#约束" class="hash-link" aria-label="约束的直接链接" title="约束的直接链接">​</a></h2><p>必须对调用方传递的类型参数和泛型函数中的代码设置限制。调用方只能传递满足约束的类型参数。泛型函数只能以约束允许的方式使用这些值。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="any的允许操作"><code>any</code>的允许操作<a href="#any的允许操作" class="hash-link" aria-label="any的允许操作的直接链接" title="any的允许操作的直接链接">​</a></h2><p><code>any</code>来约束类型参数时，表示参数入参可以是任意类型
允许的操作</p><ul><li>声明这些类型的变量</li><li>将相同类型的其他值分配给这些变量</li><li>将这些变量传递给函数或从函数返回</li><li>获取这些变量的地址将这些类型的值转换或分配给<code>interface{}</code></li><li>将类型<code>T</code>的值转换为类型<code>T</code>（允许但无用）</li><li>使用类型断言将接口值转换为该类型</li><li>将类型用作类型开关中</li><li>定义并使用使用这些类型的复合类型，例如该类型的片段</li><li>将类型传递给某些预先声明的函数，例如<code>new</code></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="定义约束">定义约束<a href="#定义约束" class="hash-link" aria-label="定义约束的直接链接" title="定义约束的直接链接">​</a></h2><p>已经有了一个接近约束所需的构造：接口类型。接口类型是一组方法。唯一可以分配给接口类型变量的值是那些实现相同方法的类型。接口类型的值能够执行的操作是调用方法。
使用类型实参调用泛型函数类似于为接口类型的变量赋值：类型实参必须实现类型参数的约束。编写泛型函数就像使用接口类型的值：泛型代码只能使用约束允许的操作（或任何类型允许的操作）。因此，在这种设计中，约束只是接口类型。满足约束意味着实现接口类型。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="any约束"><code>any</code>约束<a href="#any约束" class="hash-link" aria-label="any约束的直接链接" title="any约束的直接链接">​</a></h2><p>简化每次都定义为<code>interface{}</code></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用约束">使用约束<a href="#使用约束" class="hash-link" aria-label="使用约束的直接链接" title="使用约束的直接链接">​</a></h2><p>对于泛型函数，可以将约束视为类型参数的类型：元类型</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Stringify</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T Stringer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ret </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ret</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">String</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> ret</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="多类型参数">多类型参数<a href="#多类型参数" class="hash-link" aria-label="多类型参数的直接链接" title="多类型参数的直接链接">​</a></h2><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// s1 s2 可以不同类型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Print2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T2 any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// s1 s2 必须是元素相同的类型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Print2Same</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// s p 不同类型</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> ConcatTo</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">S Stringer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> P Plusser</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">S</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">P</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// s1 s2 都符合 Stringer，但实现类型不同</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Stringify2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T2 Stringer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> s2 </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="泛型类型">泛型类型<a href="#泛型类型" class="hash-link" aria-label="泛型类型的直接链接" title="泛型类型的直接链接">​</a></h2><p>要使用泛型类型，必须提供类型实参，这叫做实例化。类型参数用方括号括起来。通过为类型参数提供类型实参来实例化一个类型时，会生成一个类型，在类型参数的每次使用都会被相应的类型实参取代。
泛型类型可以有方法。方法的接收方类型必须声明与接收方类型方法中声明的类型参数数量相同的类型参数。它们的声明没有任何约束。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Vector</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vector</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">v </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>方法声明中列出的类型参数不必与类型声明中的类型参数同名。特别是，如果该方法未使用它们，则可以使用<code>_</code>。
泛型类型通常可以引用自身，但当泛型类型引用自身时，类型实参必须与类型参数的顺序一致。这个限制阻止了类型实例化的无限递归。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        next </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">List</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// this reference to List[T] is OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        val  T</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// This type is INVALID.t</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> P</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T2 any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        F </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">P</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID; must be [T1, T2]}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ListHead</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        head </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ListElement</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ListElement</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        next </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ListElement</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        val  T</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Using ListHead[T] here is OK.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// ListHead[T] refers to ListElement[T] refers to ListHead[T].</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Using ListHead[int] would not be OK, as ListHead[T]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// would have an indirect reference to ListHead[int].</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        head </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">ListHead</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="方法不能接受其他类型参数">方法不能接受其他类型参数<a href="#方法不能接受其他类型参数" class="hash-link" aria-label="方法不能接受其他类型参数的直接链接" title="方法不能接受其他类型参数的直接链接">​</a></h2><p>虽然泛型类型的方法可以使用该类型的参数，但方法本身可能没有其他类型参数。如果向方法中添加类型实参是有用的，那么必须编写一个适当的参数化顶级函数。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="运算符">运算符<a href="#运算符" class="hash-link" aria-label="运算符的直接链接" title="运算符的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="类型集">类型集<a href="#类型集" class="hash-link" aria-label="类型集的直接链接" title="类型集的直接链接">​</a></h3><p>每个类型都有类型集，非接口类型<code>T</code>的类型集就是<code>{T}</code>，仅包含自身的集合。普通接口类型的类型集就是所有实现接口方法的类型。
普通类型的类型集是无穷的，对于给定的类型<code>T</code>可以很容易的推断是否属于接口类型<code>IT</code>。但无法穷举<code>IT</code>的所有类型，<code>IT</code>是其本身类型集的一员，<code>interface{}</code>的类型集是所有可能类型的集。
通过查看接口的元素来构造接口类型的类型集是很有用的。这将以不同的方式产生相同的结果。接口的元素可以是方法签名或嵌入式接口类型。虽然方法签名不是一个类型，但是为它定义一个类型集是很方便的：声明该方法的所有类型的集合。嵌入式接口类型<code>E</code>的类型集就是<code>E</code>的类型集：声明<code>E</code>的所有方法的所有类型的集合。
对于任何方法签名<code>M</code>，<code>interface{ M }</code>的类型集就是类型<code>M</code>：定义<code>M</code>的所有类型集合。对任何方法签名<code>M1</code>和<code>M2</code>，<code>interface{ M1; M2 }</code>的类型集就是同时定义<code>M1</code>和<code>M2</code>的所有类型集合，即<code>M1</code>类型集与<code>M2</code>类型集的交集。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束类型集">约束类型集<a href="#约束类型集" class="hash-link" aria-label="约束类型集的直接链接" title="约束类型集的直接链接">​</a></h3><p>满足约束的类型实参就是约束类型集的一员。
对于普通接口类型，其唯一元素是方法签名和嵌入的普通接口类型，其含义完全相同：实现接口类型的类型集就是其类型集中的类型集。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束元素">约束元素<a href="#约束元素" class="hash-link" aria-label="约束元素的直接链接" title="约束元素的直接链接">​</a></h3><p>普通接口类型的元素是方法签名和嵌入式接口类型。建议允许在用作约束的接口类型中使用另外三个元素。如果使用了这些附加元素中的任何一个，则接口类型不能用作普通类型，而只能用作约束。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="任意类型约束元素">任意类型约束元素<a href="#任意类型约束元素" class="hash-link" aria-label="任意类型约束元素的直接链接" title="任意类型约束元素的直接链接">​</a></h4><p>新元素只允许列出任何类型，而不仅仅是接口类型。例如：<code>type Integer interface{int}</code>。当非接口类型<code>T</code>列为约束的元素时，其类型集仅为<code>{T}</code>。<code>int</code>的类型集是<code>{int}</code>。由于约束类型集是所有元素的类型集的交叉部分，因此<code>Integer</code>的类型集也是<code>{int}</code>。这个<code>Integer</code>约束可以被集合<code>{int}</code>中的任何类型满足。
该类型可能是引用类型参数（或多个）的类型文字，但可能不是一个主类型参数。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// EmbeddedParameter is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> EmbeddedParameter</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                T </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: may not list a plain type parameter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="近似约束元素">近似约束元素<a href="#近似约束元素" class="hash-link" aria-label="近似约束元素的直接链接" title="近似约束元素的直接链接">​</a></h4><p><code>~T</code>：底层类型为<code>T</code>的所有类型的集合
底层类型满足：</p><ol><li>类型字面量，例如<code>[]byte</code>、<code>struct{ f int }</code></li><li>大部分预声明类型，例如<code>int</code>、<code>string</code>（不包括<code>error</code>）
如果<code>T</code>是类型参数或<code>T</code>是接口类型，则不允许使用<code>~T</code>。</li></ol><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> MyString </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// AnyString matches any type whose underlying type is string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// This includes, among others, the type string itself, and</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// the type MyString.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> AnyString </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ~</span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// ApproximateMyString is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ApproximateMyString </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ~MyString </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: underlying type of MyString is not MyString</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// ApproximateParameter is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ApproximateParameter</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                ~T </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: T is a type parameter</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="联合元素">联合元素<a href="#联合元素" class="hash-link" aria-label="联合元素的直接链接" title="联合元素的直接链接">​</a></h4><p>约束元素系列，通过<code>|</code>分割，是每个元素联合的类型集，每个元素必须是不同类型</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="基于类型集的运算符">基于类型集的运算符<a href="#基于类型集的运算符" class="hash-link" aria-label="基于类型集的运算符的直接链接" title="基于类型集的运算符的直接链接">​</a></h3><p>类型集的目的是为了在泛型方法中使用运算符，例如<code>&lt;</code>。在泛型方法中就可以使用约束类型所支持的运算符。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束的比较类型">约束的比较类型<a href="#约束的比较类型" class="hash-link" aria-label="约束的比较类型的直接链接" title="约束的比较类型的直接链接">​</a></h3><p>运算符只能与语言预先声明的类型一起使用的规则有两个例外情况<code>==</code>、<code>!=</code>，这两个运算符仅对结构体、数组和接口类型允许使用。
为了定义接受比较类型的约束，引入<code>comparable</code>。<code>comparable</code>约束的类型集是所有比较类型的集合。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Index returns the index of x in s, or -1 if not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Index</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T comparable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> x T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// v and x are type T, which has the comparable</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// constraint, so we can use == here.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> x </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// ComparableHasher is a type constraint that matches all</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// comparable types with a Hash method.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ComparableHasher </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            comparable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">Hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">uintptr</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// ImpossibleConstraint is a type constraint that no type can satisfy,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// because slice types are not comparable.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> ImpossibleConstraint </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            comparable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="相互引用的类型参数">相互引用的类型参数<a href="#相互引用的类型参数" class="hash-link" aria-label="相互引用的类型参数的直接链接" title="相互引用的类型参数的直接链接">​</a></h2><p>在单个类型参数列表中，约束可以引用任何其他类型参数，甚至是稍后在同一列表中声明的类型参数。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> graph</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// NodeConstraint is the type constraint for graph nodes:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// they must have an Edges method that returns the Edge's</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// that connect to this Node.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> NodeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Edge any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">Edges</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Edge</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// EdgeConstraint is the type constraint for graph edges:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// they must have a Nodes method that returns the two Nodes</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// that this edge connects.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> EdgeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">Nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to Node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Graph is a graph composed of nodes and edges.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Graph</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node NodeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Edge</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Edge EdgeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// New returns a new graph given a list of nodes.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> New</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node NodeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Edge</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Edge EdgeConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nodes </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Graph </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// ShortestPath returns the shortest path between two nodes,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// as a list of edges.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">g </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Graph</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Node</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> Edge</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ShortestPath</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> to Node</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Edge </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ————————————————</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> demo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Vertex is a node in a graph.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Vertex </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Edges returns the edges connected to v.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vertex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Edges</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">FromTo </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// FromTo is an edge in a graph.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> FromTo </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Nodes returns the nodes that ft connects.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ft </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">FromTo</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vertex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vertex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ———————————————————</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> g </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> graph</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">New</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vertex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">FromTo</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Vertex</span><span class="token punctuation" style="color:#393A34">{</span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> NodeInterface </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Edges</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">EdgeInterface </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> EdgeInterface </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Nodes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">NodeInterface</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NodeInterface</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 允许这么定义，但不建议</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> g </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> graph</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">New</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">NodeInterface</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">EdgeInterface</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">NodeInterface</span><span class="token punctuation" style="color:#393A34">{</span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类型推断">类型推断<a href="#类型推断" class="hash-link" aria-label="类型推断的直接链接" title="类型推断的直接链接">​</a></h2><p>在许多情况下，可以使用类型推断来避免显式写出部分或全部类型参数。可以对函数调用使用函数实参类型推断，从非类型入参的类型推断类型实参。可以使用约束类型推断从已知类型入参推断未知类型实参。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      f </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int64</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int64</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> r </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Specify both type arguments explicitly.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      r </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">int64</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Specify just the first type argument, for F,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// and let T be inferred.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      r </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Don't specify any type arguments, and let both be inferred.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      r </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="类型统一">类型统一<a href="#类型统一" class="hash-link" aria-label="类型统一的直接链接" title="类型统一的直接链接">​</a></h3><p>类型统一基于类型推断，应用于两种类型，满足以下一种或都满足：</p><ol><li>是类型参数</li><li>包含类型参数</li></ol><p>类型统一通过比较类型结构实现，忽略类型参数的结构必须相同，其他类型必须等效。
例如：<code>T1</code>、<code>T2</code>是类型参数，<code>[]map[int]bool</code>可以与以下类型统一：</p><ul><li><code>[]map[int]bool</code></li><li><code>T1(T1 matches []map[int]bool)</code></li><li><code>[]T1(T1 matches map[int]bool)</code></li><li><code>[]map[T1]T2(T1 matches int, T2 matches bool)</code></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="函数实参类型推断">函数实参类型推断<a href="#函数实参类型推断" class="hash-link" aria-label="函数实参类型推断的直接链接" title="函数实参类型推断的直接链接">​</a></h3><p>唯一可以推断的类型实参是那些用于函数（非类型）输入参数类型的参数。如果某些类型实参仅用于函数的结果参数类型，或仅用于函数体，则无法使用函数实参类型推断来推断这些类型实参。
函数实参类型推断是一种双过程算法，使用双过程算法在某些情况下后面的算法可以确定非类型约束的类型：</p><ol><li>忽略调用者侧的非类型约束以及方法定义中的组合类型。统一列表中的相应类型。这将提供函数端的类型参数与调用方端的类型之间的关联。如果同一类型参数在函数端出现多次，则它将匹配调用方端的多个实参类型。如果这些调用方类型不等价，就会报告一个错误。</li><li>检查调用端非类型约束。如果不存在非类型约束或在相应方法类型的类型参数已经匹配其他输入类型，则类型推断结束。</li></ol><p>例子：</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">              s1 </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token function" style="color:#d73a49">Print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>将<code>[]int</code>与<code>[]T</code>比较，<code>int</code>匹配<code>T</code>，推断结束。<code>T</code>就是<code>int</code>，因此<code>Print</code>就是调用<code>Print[int]</code></p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// Map calls the function f on every element of the slice s,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// returning a new slice of the results.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">F</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  r</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>F</code>、<code>T</code>都作为入参，所以方法实参类型接口是可行的。<code>strs := Mqp([]int{1, 2, 3}, strconv.Itoa)</code>。可以将<code>[]int</code>匹配<code>[]F</code>，<code>F</code>匹配<code>int</code>。<code>strconv.Itoa</code>是<code>func(int) string</code>，因此<code>F</code>对应<code>int</code>，<code>T</code>对应<code>string</code>。<code>F</code>匹配了2次<code>int</code>。推断成功，因此匹配为<code>Map[int, string]</code>。
函数实参类型推断是在不考虑约束的情况下进行的。首先，使用函数实参类型推断来确定要用于函数的类型实参，然后，如果成功，将检查这些类型实参是否实现了约束（如果有的话）。注意，在的函数实参类型推断成功之后，编译器仍必须检查实参是否可以分配给参数，就像任何函数调用一样。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束类型推断">约束类型推断<a href="#约束类型推断" class="hash-link" aria-label="约束类型推断的直接链接" title="约束类型推断的直接链接">​</a></h3><p>约束类型推断允许基于类型参数约束从另一个类型实参推断一个类型实参。
实用性：当函数想要为某个其他类型参数的元素定义类型名时，或者当函数想要对基于某个其他类型参数的类型应用约束时
只有当某个类型参数的约束中的某个类型集中只有一个类型，或者某个类型集中每个类型的基础类型都是同一类型时，约束类型推断才能推断类型。这两种情况略有不同，第一种情况，类型集具有明确的一种类型，单个类型不必是其自身的基础类型。无论哪种方式，单个类型都称为结构类型，约束称为结构约束。结构类型描述了类型参数所需的结构。结构约束也可以定义方法，但这些方法被约束类型推理忽略。为了使约束类型推断有用，通常将使用一个或多个类型参数来定义结构类型。
仅当至少有一个类型参数的类型参数未知时，才会尝试约束类型推断。
推断算法：</p><ol><li>创建从类型参数到类型实参的映射。根据已知类型实参的类型参数初始化映射。</li><li>对于每个结构约束的类型参数，统一类型参数与结构类型。这将类型参数与其约束相关联。将结果添加到维护的映射中。</li><li>统一的过程中，找到类型参数的关联，也加入映射中。</li><li>当找到任何一个类型参数的多个关联时，统一这些关联以生成单个映射条目。</li><li>如果一个类型参数与另一个类型参数直接关联，这意味着它们必须都与同一类型匹配，那么将每个参数的关联统一在一起。</li><li>以上任意步骤失败，类型推断就失败</li></ol><p>在将所有类型参数与结构约束合并之后，就有了各种类型参数到类型（可能是或包含其他类型参数）的映射。继续查找类型参数<code>T</code>到完全已知的类型实参<code>A</code>的映射，该类型实参不包含任何类型参数。
在映射的类型参数中出现<code>T</code>的任何地方，都将<code>T</code>替换为<code>A</code>。
重复此过程，直到替换完每个类型参数。
当约束类型推断可行时，处理流程：</p><ul><li>根据已知类型实参构建映射</li><li>应用约束类型推断</li><li>根据类型实参应用函数类型推断</li><li>再次应用约束类型推断</li><li>使用任何剩余非类型实参的默认类型函数方法类型推断</li><li>再次应用约束类型推断</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="元素约束示例">元素约束示例<a href="#元素约束示例" class="hash-link" aria-label="元素约束示例的直接链接" title="元素约束示例的直接链接">​</a></h3><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Double returns a new slice that contains all the elements of s, doubled.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Double</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">E constraints</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Integer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">E</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">E </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">E</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              r</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// MySlice is a slice of ints.type </span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          MySlice </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// The type of V1 will be []int, not MySlice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Here we are using function argument type inference,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// but not constraint type inference.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> V1 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Double</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MySlice</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// DoubleDefined returns a new slice that contains the elements of s,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// doubled, and also has the same type as s.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> DoubleDefined</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">S ~</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">E</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E constraints</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Integer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s S</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> S </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Note that here we pass S to make, where above we passed []E.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">S</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              r</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// The type of V2 will be MySlice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> V2 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> DoubleDefined</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MySlice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MySlice</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 方法实参类型推断本身不足以推断此处的类型实参</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 因为类型参数E未用于任何输入参数。但方法实参类型推断和约束类型推断的组合是有效的。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// The type of V3 will be MySlice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> V3 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">DoubleDefined</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">MySlice</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 首先应用方法实参类型推断，可以看出实参类型是MySlice</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 方法实参类型推断匹配类型参数S为MySlice.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 接着进行约束类型推断，已知一个类型实参S，看出类型实参S是结构体类型约束</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 创建已知类型实参映射 {S -&gt; MySlice}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 统一约束类型集中只有单一类型的结构体约束的每个类型参数。此情况下，结构体约束是 ~[]E，结构体类型是[]E</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 因此将S统一成[]E，因为已经有S的映射，可以将[]E统一成MySlice，因MySlice定义是[]int，所以E就是int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 得出 {S -&gt; MySlice, E -&gt; int}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 最终调用DoucleDefined的类型实参就是 [MySlice, int]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="指针方法示例">指针方法示例<a href="#指针方法示例" class="hash-link" aria-label="指针方法示例的直接链接" title="指针方法示例的直接链接">​</a></h3><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Setter is a type constraint that requires that the type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// implement a Set method that sets the value from a string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Setter </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// FromStrings takes a slice of strings and returns a slice of T,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// calling the Set method to set each returned value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Note that because T is only used for a result parameter,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// function argument type inference does not work when calling</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// this function.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> FromStrings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T Setter</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Settable is an integer type that can be set from a string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Settable </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Set sets the value of *p from a string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> strconv</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Atoi</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// real code should not ignore the error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">p </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Settable</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">F</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID not compile</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID compile but panic at run time, nil error</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings</span><span class="token punctuation" style="color:#393A34">[</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Here we want nums to be []Settable{1, 2}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token operator" style="color:#393A34">--</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Setter2 is a type constraint that requires that the type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// implement a Set method that sets the value from a string,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// and also requires that the type be a pointer to its type parameter.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Setter2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">B any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">B </span><span class="token comment" style="color:#999988;font-style:italic">// non-interface type constraint element</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// FromStrings2 takes a slice of strings and returns a slice of T,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// calling the Set method to set each returned value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">//</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// We use two different type parameters so that we can return</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// a slice of type T but call methods on *T aka PT.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// The Setter2 constraint ensures that PT is a pointer to T.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> FromStrings2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PT Setter2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            result </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// The type of &amp;result[i] is *T which is in the type set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// of Setter2, so we can convert it to PT.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              p </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">PT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token comment" style="color:#999988;font-style:italic">// PT has a Set method.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              p</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">F2</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// FromStrings2 takes two type parameters.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// The second parameter must be a pointer to the first.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Settable is as above.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Now nums is []Settable{1, 2}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 约束类型推断可以简化上述定义</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// {T -&gt; Settable}，{T -&gt; Settable, PT -&gt; *T}，{T -&gt; Settable, PT -&gt; *Settable}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束类型推断后仍应用约束">约束类型推断后仍应用约束<a href="#约束类型推断后仍应用约束" class="hash-link" aria-label="约束类型推断后仍应用约束的直接链接" title="约束类型推断后仍应用约束的直接链接">​</a></h3><p>即使基于约束使用约束类型推断推断类型实参，也必须在确定类型实参后检查约束。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Unsettable is a type that does not have a Set method.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Unsettable </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">F4</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// This call is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Unsettable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用在约束中引用自身的类型">使用在约束中引用自身的类型<a href="#使用在约束中引用自身的类型" class="hash-link" aria-label="使用在约束中引用自身的类型的直接链接" title="使用在约束中引用自身的类型的直接链接">​</a></h2><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Index returns the index of e in s, or -1 if not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Index</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T Equaler</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Equal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Index returns the index of e in s, or -1 if not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Index</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Equal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// same as above</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// equalInt is a version of int that implements Equaler.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> equalInt </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// The Equal method lets equalInt implement the Equaler constraint.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a equalInt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Equal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b equalInt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">bool</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> b </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// indexEqualInts returns the index of e in s, or -1 if not found.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">indexEqualInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">equalInt</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e equalInt</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The type argument equalInt is shown here for clarity.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Function argument type inference would permit omitting it.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> Index</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">equalInt</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类型参数的值未装箱">类型参数的值未装箱<a href="#类型参数的值未装箱" class="hash-link" aria-label="类型参数的值未装箱的直接链接" title="类型参数的值未装箱的直接链接">​</a></h2><p>在当前的Go实现中，接口值总是包含指针。将非指针值放入接口变量会导致该值被装箱。这意味着实际值存储在堆或堆栈上的其他位置，接口值保存指向该位置的指针。
在此设计下，泛型的值是未装箱的。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Settable is an integer type that can be set from a string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Settable </span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Set sets the value of *p from a string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">Set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// same as above</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">F</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// The type of nums is []Settable.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nums </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> FromStrings2</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">Settable</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// Settable can be converted directly to int.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// This will set first to 1.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        first </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">int</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nums</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>当用<code>Settable</code>类型调用<code>FromStrings2</code>实例化时，得到一个<code>[]Settable</code>。该切片的元素是<code>Settable</code>，也就是说，它们将是整数。即使它们是由泛型函数创建和设置的，也不会被装箱。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Pair</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">F1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> F2 any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        first  F1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        second F2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 当上述类型被初始化，属性不会装箱，将会分配内存。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// 类型 Pari[int, string] 将会转化为 struct { first int; second string}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="类型集详细信息">类型集详细信息<a href="#类型集详细信息" class="hash-link" aria-label="类型集详细信息的直接链接" title="类型集详细信息的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束中的元素和方法">约束中的元素和方法<a href="#约束中的元素和方法" class="hash-link" aria-label="约束中的元素和方法的直接链接" title="约束中的元素和方法的直接链接">​</a></h3><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// StringableSignedInteger is a type constraint that matches any</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// type that is both 1) defined as a signed integer type;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// 2) has a String method.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> StringableSignedInteger </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int64</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">String</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>类型规则决定了这意味着什么。union元素的类型集是所有类型的集，这些类型的基础类型是预先声明的有符号整数类型之一。<code>String() string</code>的类型集是定义该方法的所有类型的集。<code>StringableSignedInteger</code>的类型集是这两个类型集的交集。结果是所有类型的集合，这些类型的基础类型是预先声明的有符号整数类型之一，并且该类型定义了方法<code>String() string</code>。使用参数化类型P（使用<code>StringableSignedInteger</code>作为约束）的方法可以对类型<code>P</code>的值使用任何整数类型（+、*等）允许的操作。它还可以对类型<code>P</code>的值调用<code>String</code>方法以获取字符串。
值得注意的是<code>~``在这里是必不可少的。</code>StringableSignedIntegrater<code>约束使用</code>~int<code>，而不是</code>int<code>。类型</code>int<code>本身不允许作为类型参数，因为</code>int`没有字符串方法。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="约束中的复合类型">约束中的复合类型<a href="#约束中的复合类型" class="hash-link" aria-label="约束中的复合类型的直接链接" title="约束中的复合类型的直接链接">​</a></h3><p>约束元素可以是类型文字</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> byteseq </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token builtin">string</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">byte</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>通常的规则适用：此约束的类型参数可以是<code>string</code>或<code>[]byte</code>；具有此约束的泛型函数可以使用<code>string</code>或<code>[]byte</code>允许的任何操作。
<code>byteseq</code>约束允许编写适用于<code>string</code>或<code>[]byte</code>的泛型函数。
对于复合类型（字符串、指针、数组、切片、结构体、方法、映射、通道），施加了额外的限制：只有当操作符接受相同的输入类型并为类型集中的所有类型生成相同的结果类型时，才可以使用操作。
要明确的是，有个例外：仅当复合类型出现在类型集中时，才施加限制。当复合类型是从类型集之外的类型参数形成时，它不适用，例如在<code>var v[] T</code>中，对于某些类型参数<code>T</code>。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// structField is a type constraint whose type set consists of some</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// struct types that all have a field named x.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> structField </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> a </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> x </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> b </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> x </span><span class="token builtin">float64</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> c </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> x </span><span class="token builtin">uint64</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// This function is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> IncrementX</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T structField</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> p</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">x </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: type of p.x is not the same for all types in set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            p</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// sliceOrMap is a type constraint for a slice or a map.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> sliceOrMap </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Entry returns the i'th entry in a slice or the value of a map</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// at key i. This is valid as the result of the operator is always int.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Entry</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T sliceOrMap</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// This is either a slice index operation or a map key lookup.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Either way, the index and result types are type int.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// sliceOrFloatMap is a type constraint for a slice or a map.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> sliceOrFloatMap </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">float64</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// This function is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// In this example the input type of the index operation is either</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// int (for a slice) or float64 (for a map), so the operation is</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// not permitted.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> FloatEntry</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T sliceOrFloatMap</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> c</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1.0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: input type is either int or float64.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="类型集中的类型参数">类型集中的类型参数<a href="#类型集中的类型参数" class="hash-link" aria-label="类型集中的类型参数的直接链接" title="类型集中的类型参数的直接链接">​</a></h3><p>约束元素中的类型文字可以引用约束的类型参数。在本例中，泛型方法<code>Map</code>采用两个类型参数。第一个类型参数需要有一个作为第二个类型参数切片的底层类型。第二个参数上没有约束。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// SliceConstraint is a type constraint that matches a slice of</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// the type parameter.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> SliceConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Map takes a slice of some element type and a transformation function,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// and returns a slice of the function applied to each element.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Map returns a slice that is the same type as its slice argument,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// even if that is a defined type.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">S SliceConstraint</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">E</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> E any</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s S</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> f </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">E</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> E</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> S </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            r </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">S</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              r</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">f</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">v</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> r</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// MySlice is a simple defined type.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> MySlice </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// DoubleMySlice takes a value of type MySlice and returns a new</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// MySlice value with each element doubled in value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">DoubleMySlice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s MySlice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> MySlice </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// The type arguments listed explicitly here could be inferred.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> Map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">MySlice</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">int</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> e </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token comment" style="color:#999988;font-style:italic">// Here v has type MySlice, not type []int.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="类型转换">类型转换<a href="#类型转换" class="hash-link" aria-label="类型转换的直接链接" title="类型转换的直接链接">​</a></h3><p>在具有两个类型参数From和To的函数中，如果From约束类型集中的所有类型都可以转换为To约束类型集中的所有类型，则From类型的值可以转换为To类型的值。这是一般规则的结果，即泛型函数可以使用类型集中列出的所有类型都允许的任何操作。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> integer </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">uint</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uintptr</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Convert</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">To</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> From integer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from From</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> To </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            to </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">To</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">from</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">From</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">to</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> from </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              </span><span class="token function" style="color:#d73a49">panic</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"conversion out of range"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="非类型化常量">非类型化常量<a href="#非类型化常量" class="hash-link" aria-label="非类型化常量的直接链接" title="非类型化常量的直接链接">​</a></h3><p>某些方法使用非类型化常量。如果类型参数约束的类型集中的每种类型都允许使用非类型常量，则允许使用typeparameter的值。与类型转换一样，这是一般规则的结果，即泛型函数可以使用类型集中所有类型都允许的任何操作。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> integer </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">uint</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uintptr</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Add10</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T integer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// OK: 10 can convert to any integer type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// This function is INVALID.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> Add1024</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">T integer</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">s </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> s </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              s</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> v </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1024</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// INVALID: 1024 not permitted by int8/uint8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="嵌入约束的类型集">嵌入约束的类型集<a href="#嵌入约束的类型集" class="hash-link" aria-label="嵌入约束的类型集的直接链接" title="嵌入约束的类型集的直接链接">​</a></h3><p>当一个约束嵌入另一个约束时，外部约束的类型集是所有相关类型集的交点。如果有多个嵌入类型，则交集将保留任何类型参数必须满足所有约束元素要求的属性。</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Addable is types that support the + operator.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Addable </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">int64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">uint</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint8</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint16</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uint64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">uintptr</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">float32</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">float64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">complex64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token builtin">complex128</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain">~</span><span class="token builtin">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// Byteseq is a byte sequence: either string or []byte.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> Byteseq </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ~</span><span class="token builtin">string</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> ~</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">byte</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// AddableByteseq is a byte sequence that supports +.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// This is every type that is both Addable and Byteseq.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// In other words, just the type set ~string.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> AddableByteseq </span><span class="token keyword" style="color:#00009f">interface</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Addable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Byteseq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="联合元素中的接口类型">联合元素中的接口类型<a href="#联合元素中的接口类型" class="hash-link" aria-label="联合元素中的接口类型的直接链接" title="联合元素中的接口类型的直接链接">​</a></h3><p>联合元素的类型集是union中所有类型的类型集的并集。对于大多数类型<code>T</code>，<code>T</code>的类型集就是<code>T</code>本身。但是，对于接口类型（和近似元素），情况并非如此。如前所述，不嵌入非接口元素的接口类型的类型集是声明接口的所有方法的所有类型的集合，包括接口类型本身。使用union元素中的此类接口类型将向union添加该类型集。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="空类型集">空类型集<a href="#空类型集" class="hash-link" aria-label="空类型集的直接链接" title="空类型集的直接链接">​</a></h3><p>可以使用空类型集编写约束。没有任何类型参数可以满足此类约束，因此任何尝试实例化使用空类型集的约束的函数都将失败。一般来说，编译器不可能检测到所有此类情况。对于能够检测到的情况，vet工具可能应该给出一个错误。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="类型集的一般说明">类型集的一般说明<a href="#类型集的一般说明" class="hash-link" aria-label="类型集的一般说明的直接链接" title="类型集的一般说明的直接链接">​</a></h3><p>在约束中显式列出类型似乎有些尴尬，但调用侧需要很清楚知道允许哪些类型实参，以及泛型方法允许哪些操作。
如果语言后来更改为支持操作符方法（目前没有此类计划），那么约束将像处理任何其他类型的方法一样处理它们。
预声明类型的数量总是有限的，这些类型支持的操作符的数量也有限。未来的语言变化不会从根本上改变这些事实，因此这种方法将继续有用。这种方法不会试图处理所有可能的操作。我们的期望是，通常在泛型方法和类型声明中使用复合类型来处理复合类型，而不是将复合类型放入类型集中。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="反射">反射<a href="#反射" class="hash-link" aria-label="反射的直接链接" title="反射的直接链接">​</a></h2><p>不打算以任何方式更改reflect软件包。当一个类型或方法被实例化时，所有类型参数都将成为普通的非泛型类型。实例化类型String方法的<code>reflect.Type</code>值将返回名称，并在方括号中包含类型实参。例如，<code>List[int]</code>。
非泛型代码在没有实例化的情况下不可能引用泛型代码，因此对于未实例化的泛型类型或方法，没有任何操作信息。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="总结">总结<a href="#总结" class="hash-link" aria-label="总结的直接链接" title="总结的直接链接">​</a></h2><p>要点：</p><ul><li>函数和类型可以有类型参数，类型参数使用约束，而约束又是接口类型</li><li>约束描述类型参数所需的方法和允许的类型</li><li>约束描述类型参数允许的方法和操作</li><li>在使用类型参数调用函数时，类型推断通常允许省略类型参数。</li></ul>]]></content:encoded>
            <category>golang</category>
            <category>泛型</category>
        </item>
        <item>
            <title><![CDATA[玩转 Java 线程及线程池]]></title>
            <link>https://nekobox69.github.io/blog/tech/玩转Java线程及线程池</link>
            <guid>https://nekobox69.github.io/blog/tech/玩转Java线程及线程池</guid>
            <pubDate>Sun, 19 Jul 2020 08:28:11 GMT</pubDate>
            <description><![CDATA[线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。]]></description>
            <content:encoded><![CDATA[<p>线程是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p>Java 中线程可分为 2 种：</p><ul><li><p>守护线程</p><p>例如： GC 线程</p></li><li><p>用户线程</p><p>应用程序里自定义的（当然也可在应用程序中创建守护线程，只需<code>setDaemon(true)</code>）</p></li></ul><p><strong>二者最大的区别：守护线程在主线程执行完后，会直接退出，而用户线程在主线程执行完后，仍在运行。</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="线程的创建">线程的创建<a href="#线程的创建" class="hash-link" aria-label="线程的创建的直接链接" title="线程的创建的直接链接">​</a></h2><p>Java 提供了多种创建方式，可能最为熟悉的是 实现<code>Runnable</code>和继承<code>Thread</code>，其实除了这 2 种还是有其他的形式。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现runnable">实现<code>Runnable</code><a href="#实现runnable" class="hash-link" aria-label="实现runnable的直接链接" title="实现runnable的直接链接">​</a></h3><p>可以避免多继承问题。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread1 implements Runnable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void run() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello, I'm a thread!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread t = new Thread(new Thread1(), "thread-1");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        t.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="继承thread">继承<code>Thread</code><a href="#继承thread" class="hash-link" aria-label="继承thread的直接链接" title="继承thread的直接链接">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread2 extends Thread {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void run() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello, I'm a thread!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread t = new Thread2();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        t.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="匿名内部类">匿名内部类<a href="#匿名内部类" class="hash-link" aria-label="匿名内部类的直接链接" title="匿名内部类的直接链接">​</a></h3><p>使用场景：一次性调用</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread3 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Thread() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            public void run() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println("Hello, I'm thread1!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Thread(new Runnable() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            public void run() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println("Hello, I'm thread2!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }).start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现callable">实现<code>Callable</code><a href="#实现callable" class="hash-link" aria-label="实现callable的直接链接" title="实现callable的直接链接">​</a></h3><p>可以带返回值，并且可以排除异常。运行 Callable 任务可拿到一个 Future 对象。所以一般配合<code>Future</code>和<code>FutureTask</code>使用。</p><p>使用场景：需要获取线程返回值</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="future方式"><code>Future</code>方式<a href="#future方式" class="hash-link" aria-label="future方式的直接链接" title="future方式的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread5 implements Callable&lt;String&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("In");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread.sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Out");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return "I implements Callable ";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread5 t = new Thread5();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Future&lt;String&gt; future = service.submit(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(future.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="futuretask方式"><code>FutureTask</code>方式<a href="#futuretask方式" class="hash-link" aria-label="futuretask方式的直接链接" title="futuretask方式的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread5 implements Callable&lt;String&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public String call() throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("In");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread.sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Out");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return "I implements Callable ";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws Exception {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread5 t2 = new Thread5();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(t2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread thread = new Thread(task);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        thread.start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(task.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service2 = Executors.newSingleThreadExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;String&gt; task2 = new FutureTask&lt;&gt;(t2);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(task2.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><code>Future</code>和 <code>FutureTask</code>也可以用来执行<code>Runnable</code>接口的实现类，而且通过这 2 种方式可以获取线程的状态，并可以取消线程执行。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="lambda">Lambda<a href="#lambda" class="hash-link" aria-label="Lambda的直接链接" title="Lambda的直接链接">​</a></h3><p>JDK8 之后可以直接用 Lambda 表达式来创建。</p><p>使用场景：一次性调用的地方</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread4 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) throws ExecutionException, InterruptedException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new Thread(() -&gt; System.out.println("Hello, I'm a thread!")).start();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Future&lt;String&gt; future = service.submit(() -&gt; "Hello, I'm a thread!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(future.get());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="线程池方式">线程池方式<a href="#线程池方式" class="hash-link" aria-label="线程池方式的直接链接" title="线程池方式的直接链接">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Thread6 implements Runnable {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Override</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public void run() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println("Hello, I'm a thread!");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.execute(new Thread6());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>使用场景：正式应用中</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="线程池">线程池<a href="#线程池" class="hash-link" aria-label="线程池的直接链接" title="线程池的直接链接">​</a></h2><p>线程的创建和销毁会消耗系统资源，而且如果创建大量的线程，会导致内存资源被占用，拖垮整个系统，所以需要用线程池来管理线程。</p><p>可达到以下效果：</p><ul><li>减少资源开销</li><li>提供响应速度</li><li>可管理性</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="任务队列">任务队列<a href="#任务队列" class="hash-link" aria-label="任务队列的直接链接" title="任务队列的直接链接">​</a></h3><p>线程池中都采用任务队列存放需要执行的线程，来看下有哪些任务队列。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="arrayblockingqueue">ArrayBlockingQueue<a href="#arrayblockingqueue" class="hash-link" aria-label="ArrayBlockingQueue的直接链接" title="ArrayBlockingQueue的直接链接">​</a></h4><p>用数组实现的有界阻塞队列，FIFO</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="linkedblockingqueue">LinkedBlockingQueue<a href="#linkedblockingqueue" class="hash-link" aria-label="LinkedBlockingQueue的直接链接" title="LinkedBlockingQueue的直接链接">​</a></h4><p>基于链表结构的阻塞队列，FIFO</p><p>容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为<code>Integer.MAX_VALUE</code></p><p>吞吐量通常要高于<code>ArrayBlockingQuene</code></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="delayqueue">DelayQueue<a href="#delayqueue" class="hash-link" aria-label="DelayQueue的直接链接" title="DelayQueue的直接链接">​</a></h4><p>任务定时周期的延迟执行的队列。</p><p>根据指定的执行时间从小到大排序，否则根据插入到队列的先后排序。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="priorityblockingqueue">PriorityBlockingQueue<a href="#priorityblockingqueue" class="hash-link" aria-label="PriorityBlockingQueue的直接链接" title="PriorityBlockingQueue的直接链接">​</a></h4><p>具有优先级的无界阻塞队列</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="synchronousqueue">SynchronousQueue<a href="#synchronousqueue" class="hash-link" aria-label="SynchronousQueue的直接链接" title="SynchronousQueue的直接链接">​</a></h4><p>不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于<code>LinkedBlockingQuene</code></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="拒绝策略">拒绝策略<a href="#拒绝策略" class="hash-link" aria-label="拒绝策略的直接链接" title="拒绝策略的直接链接">​</a></h3><ul><li><code>AbortPolicy</code>：抛出一个异常，默认的</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              throw new RejectedExecutionException("Task " + r.toString() +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                   " rejected from " +</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                   e.toString());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>DiscardPolicy</code>：直接丢弃任务</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>DiscardOldestPolicy</code>：丢弃队列里最老的任务，将新任务提交给线程池</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              if (!e.isShutdown()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  e.getQueue().poll();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  e.execute(r);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><code>CallerRunsPolicy</code>：交给线程池调用所在的线程进行处理</li></ul><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  public void rejectedExecution(Runnable r, ThreadPoolExecutor e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              if (!e.isShutdown()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  r.run();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="线程池创建threadpoolexecutor">线程池创建（ThreadPoolExecutor）<a href="#线程池创建threadpoolexecutor" class="hash-link" aria-label="线程池创建（ThreadPoolExecutor）的直接链接" title="线程池创建（ThreadPoolExecutor）的直接链接">​</a></h3><p><code>Executors</code>提供的默认线程池类型都是调用<code>ThreadPoolExecutor</code>来创建的，来看下这个类的构造函数。</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public ThreadPoolExecutor(int corePoolSize,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          int maximumPoolSize,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          long keepAliveTime,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          TimeUnit unit,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          ThreadFactory threadFactory,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                          RejectedExecutionHandler handler)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>阿里 Java 规约禁止使用 Java 内置<code>Executors</code>创建线程池，推荐使用<code>ThreadPoolExecutor</code></p></blockquote><p><strong>参数含义：</strong></p><ul><li><p>corePoolSize</p><p>线程池核心线程数（默认空闲线程数）</p><p>当<code>allowCoreThreadTimeOut</code>被设定时，如果保持活动时间内没有任务到达，则会被终止</p></li><li><p>maximumPoolSize</p><p>线程池最大线程数</p></li><li><p>keepAliveTime</p><p>超过核心线程数时，空闲线程能存活时间</p></li><li><p>unit</p><p><code>keepAliveTime</code>的时间单位</p></li><li><p>workQueue</p><p>存放任务的阻塞队列。此队列将只保存由<code>execute</code>方法提交的<code>Runnable</code>任务</p></li><li><p>threadFactory</p><p>创建线程的工厂</p></li><li><p>handler</p><p>线程池饱和策略（达到线程边界和队列容量）</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="状态">状态<a href="#状态" class="hash-link" aria-label="状态的直接链接" title="状态的直接链接">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">   private static final int RUNNING    = -1 &lt;&lt; COUNT_BITS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   private static final int SHUTDOWN   =  0 &lt;&lt; COUNT_BITS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   private static final int STOP       =  1 &lt;&lt; COUNT_BITS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   private static final int TIDYING    =  2 &lt;&lt; COUNT_BITS;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   private static final int TERMINATED =  3 &lt;&lt; COUNT_BITS;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><ul><li><p>RUNNING</p><p>高 4 位：1110</p><p>该状态的线程池会接收新任务，并处理阻塞队列中的任务</p><p><code>shutdown()</code> =&gt; SHUTDOWN 状态</p><p><code>shutdownNow()</code> =&gt; STOP 状态</p></li><li><p>SHUTDOWN</p><p>高 4 位：0000</p><p>该状态的线程池不会接收新任务，但会处理阻塞队列中的任务</p><p>队列为空，并且线程池中执行的任务也为空,进入 TIDYING 状态</p></li><li><p>STOP</p><p>高 4 位：0010</p><p>该状态的线程不会接收新任务，也不会处理阻塞队列中的任务，而且会中断正在运行的任务</p><p>线程池中执行的任务为空，进入 TIDYING 状态</p></li><li><p>TIDYING</p><p>高 4 位：0100</p><p>该状态表明所有的任务已经运行终止，记录的任务数量为 0</p><p><code>terminated()</code>执行完毕，进入 TERMINATED 状态</p></li><li><p>TERMINATED</p><p>高 4 位：0110</p><p>该状态表示线程池彻底终止</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="执行过程">执行过程<a href="#执行过程" class="hash-link" aria-label="执行过程的直接链接" title="执行过程的直接链接">​</a></h3><p>execute:</p><ol><li>运行线程数小于核心线程数，创建核心线程并启动</li><li>尝试加入队列，成功后，二次检查状态，如果失败，执行拒绝策略，如果可以运行，立刻启动一个 worker</li><li>尝试加入队列失败，尝试创建非核心线程并启动，如果失败，执行拒绝策略</li></ol><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2020/png/402881/1595063676332-b996dcea-bc74-4c7b-9839-75f667189314.png" alt="execute" class="img_ev3q"></p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public void execute(Runnable command) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (command == null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new NullPointerException();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int c = ctl.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (workerCountOf(c) &lt; corePoolSize) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (addWorker(command, true))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            c = ctl.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (isRunning(c) &amp;&amp; workQueue.offer(command)) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int recheck = ctl.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            if (! isRunning(recheck) &amp;&amp; remove(command))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                reject(command);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            else if (workerCountOf(recheck) == 0)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                addWorker(null, false);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        else if (!addWorker(command, false))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            reject(command);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>addWorker</code>中，如果加入 worker 成功，会直接调用线程的<code>start</code>运行，最终会执行<code>runWorker</code></p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">final void runWorker(Worker w) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Thread wt = Thread.currentThread();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // 获取worker中要执行的任务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Runnable task = w.firstTask;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        w.firstTask = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        w.unlock(); // allow interrupts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        boolean completedAbruptly = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             * getTask 主要做以下功能：</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             * 1.校验池状态、超时时间、最大工作数量，如果不通过返回null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             * 2.如果工作线程大于核心线程，用poll方法从队列中取出一个任务，否则，用take从队列中取出任务</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             **/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            while (task != null || (task = getTask()) != null) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                w.lock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                // 检查线程池及线程状态</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                if ((runStateAtLeast(ctl.get(), STOP) ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                     (Thread.interrupted() &amp;&amp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    !wt.isInterrupted())</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    wt.interrupt();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    beforeExecute(wt, task);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Throwable thrown = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        task.run();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } catch (RuntimeException x) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        thrown = x; throw x;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } catch (Error x) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        thrown = x; throw x;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } catch (Throwable x) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        thrown = x; throw new Error(x);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        afterExecute(task, thrown);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    task = null;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    w.completedTasks++;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    w.unlock();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            completedAbruptly = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } finally {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 1.统计完成的任务数</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 2.尝试设置线程池状态位TERMINATED</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // 3.如果线程池线程数量小于核心线程数，则增加一个线程</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            processWorkerExit(w, completedAbruptly);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="异常处理">异常处理<a href="#异常处理" class="hash-link" aria-label="异常处理的直接链接" title="异常处理的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="try-catch">try-catch<a href="#try-catch" class="hash-link" aria-label="try-catch的直接链接" title="try-catch的直接链接">​</a></h4><p>线程内部通过 try-catch 捕获</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ExecutorService service = Executors.newCachedThreadPool();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        for (long i = 0; i &lt; 100; i++) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            service.submit(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    Thread.sleep(1000);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    System.out.println("Hello, I'm a thread! " + System.currentTimeMillis());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                } catch (InterruptedException e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                    e.printStackTrace();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="带异常处理的-threadfactory">带异常处理的 ThreadFactory<a href="#带异常处理的-threadfactory" class="hash-link" aria-label="带异常处理的 ThreadFactory的直接链接" title="带异常处理的 ThreadFactory的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service = Executors.newSingleThreadExecutor(factory -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Thread thread = new Thread(factory);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            thread.setUncaughtExceptionHandler((t, e) -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                System.out.println(t.getName() + e);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            return thread;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.execute(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new RuntimeException("error");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="重写afterexecute">重写<code>afterExecute</code><a href="#重写afterexecute" class="hash-link" aria-label="重写afterexecute的直接链接" title="重写afterexecute的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class ExtendedExecutor extends ThreadPoolExecutor {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    protected void afterExecute(Runnable r, Throwable t) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        super.afterExecute(r, t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (t == null &amp;&amp; r instanceof Future&lt;?&gt;) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Object result = ((Future&lt;?&gt;) r).get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (CancellationException ce) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                t = ce;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (ExecutionException ee) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                t = ee.getCause();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            } catch (InterruptedException ie) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Thread.currentThread().interrupt(); // ignore/reset</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (t != null)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(t);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="future-的异常捕获">Future 的异常捕获<a href="#future-的异常捕获" class="hash-link" aria-label="Future 的异常捕获的直接链接" title="Future 的异常捕获的直接链接">​</a></h4><p>submit 提交的线程可以捕获<code>Future.get</code>的异常来处理</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">        ExecutorService service = Executors.newSingleThreadExecutor();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FutureTask&lt;String&gt; task = new FutureTask&lt;&gt;(() -&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            throw new RuntimeException("error");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.submit(task);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        service.shutdown();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String result = task.get();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        } catch (Exception e) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(e);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="默认线程池executors">默认线程池（Executors）<a href="#默认线程池executors" class="hash-link" aria-label="默认线程池（Executors）的直接链接" title="默认线程池（Executors）的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="fixedthreadpool">FixedThreadPool<a href="#fixedthreadpool" class="hash-link" aria-label="FixedThreadPool的直接链接" title="FixedThreadPool的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"> public static ExecutorService newFixedThreadPool(int nThreads) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ThreadPoolExecutor(nThreads, nThreads,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      0L, TimeUnit.MILLISECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      new LinkedBlockingQueue&lt;Runnable&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ThreadPoolExecutor(nThreads, nThreads,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      0L, TimeUnit.MILLISECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      threadFactory);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>固定大小的线程池</li><li>采用<code>AbortPolicy</code>，直接抛出异常<code>RejectedExecutionException</code></li><li>无边界的<code>LinkedBlockingQueue</code>，最多可接受<code>Integer.MAX_VALUE</code></li></ul><p><strong>应用场景：</strong></p><ul><li>处理 CPU 密集型的任务，确保 CPU 在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务</li></ul><p><strong>问题：</strong></p><ul><li>可能会堆积大量的请求，从而导致 OOM</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="singlethreadexecutor">SingleThreadExecutor<a href="#singlethreadexecutor" class="hash-link" aria-label="SingleThreadExecutor的直接链接" title="SingleThreadExecutor的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newSingleThreadExecutor() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new FinalizableDelegatedExecutorService</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (new ThreadPoolExecutor(1, 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    0L, TimeUnit.MILLISECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    new LinkedBlockingQueue&lt;Runnable&gt;()));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new FinalizableDelegatedExecutorService</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (new ThreadPoolExecutor(1, 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    0L, TimeUnit.MILLISECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    new LinkedBlockingQueue&lt;Runnable&gt;(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                    threadFactory));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>只维持 1 个线程的线程池</li><li>采用<code>AbortPolicy</code>，直接抛出异常<code>RejectedExecutionException</code></li><li>采用<code>LinkedBlockingQueue</code>，最多可接受<code>Integer.MAX_VALUE</code></li></ul><p><strong>应用场景：</strong></p><ul><li>串行执行</li></ul><p><strong>问题：</strong></p><ul><li>可能会堆积大量的请求，从而导致 OOM</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="cachedthreadpool">CachedThreadPool<a href="#cachedthreadpool" class="hash-link" aria-label="CachedThreadPool的直接链接" title="CachedThreadPool的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newCachedThreadPool() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      60L, TimeUnit.SECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      new SynchronousQueue&lt;Runnable&gt;());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      60L, TimeUnit.SECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      new SynchronousQueue&lt;Runnable&gt;(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                      threadFactory);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>最大大小为<code>Integer.MAX_VALUE</code>的线程池</li><li><code>keepAliveTime</code> 60S</li><li>采用<code>AbortPolicy</code>，直接抛出异常<code>RejectedExecutionException</code></li><li>采用<code>SynchronousQueue</code></li></ul><p><strong>应用场景：</strong></p><ul><li>并发量大，执行时间比较小的任务</li></ul><p><strong>问题：</strong></p><ul><li>可能会创建大量的线程，从而导致 OOM</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="singlethreadscheduledexecutor">SingleThreadScheduledExecutor<a href="#singlethreadscheduledexecutor" class="hash-link" aria-label="SingleThreadScheduledExecutor的直接链接" title="SingleThreadScheduledExecutor的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static ScheduledExecutorService newSingleThreadScheduledExecutor() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new DelegatedScheduledExecutorService</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (new ScheduledThreadPoolExecutor(1));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static ScheduledExecutorService newSingleThreadScheduledExecutor(ThreadFactory threadFactory) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new DelegatedScheduledExecutorService</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (new ScheduledThreadPoolExecutor(1, threadFactory));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>只维持 1 个线程的线程池</li><li><code>keepAliveTime</code> 0 纳秒</li><li>采用<code>AbortPolicy</code>，直接抛出异常<code>RejectedExecutionException</code></li><li>采用<code>DelayedWorkQueue</code></li><li><code>schedule</code>：带延迟时间的调度，只执行一次</li><li><code>scheduleAtFixedRate</code>：带延迟时间的调度，循环执行，固定频率</li><li><code>scheduleWithFixedDelay</code>：带延迟时间的调度，循环执行，固定延迟</li></ul><p><strong>应用场景：</strong></p><ul><li>周期性执行任务</li></ul><p><strong>问题：</strong></p><ul><li>可能会堆积大量的任务，从而导致 OOM</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="scheduledthreadpool">ScheduledThreadPool<a href="#scheduledthreadpool" class="hash-link" aria-label="ScheduledThreadPool的直接链接" title="ScheduledThreadPool的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static ScheduledExecutorService newScheduledThreadPool(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            int corePoolSize, ThreadFactory threadFactory) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ScheduledThreadPoolExecutor(corePoolSize, threadFactory);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public ScheduledThreadPoolExecutor(int corePoolSize) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              new DelayedWorkQueue());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>最大大小为<code>Integer.MAX_VALUE</code>的线程池</li><li><code>keepAliveTime</code>为 0，不会存在空闲线程</li><li>采用<code>AbortPolicy</code>，直接抛出异常<code>RejectedExecutionException</code></li><li>采用<code>DelayedWorkQueue</code></li><li><code>schedule</code>：带延迟时间的调度，只执行一次</li><li><code>scheduleAtFixedRate</code>：带延迟时间的调度，循环执行，固定频率</li><li><code>scheduleWithFixedDelay</code>：带延迟时间的调度，循环执行，固定延迟</li></ul><p><strong>应用场景：</strong></p><ul><li>周期性执行任务</li></ul><p><strong>问题：</strong></p><ul><li>可能会堆积大量的任务，从而导致 OOM</li></ul><p>此时，可能会有个疑问，<code>ScheduledThreadPoolExecutor(1)</code>与<code>newSingleThreadScheduledExecutor()</code>是否等价呢？Java Doc 中有描述：</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">    /**</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * Creates a single-threaded executor that can schedule commands</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * to run after a given delay, or to execute periodically.  (Note</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * however that if this single thread terminates due to a failure</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * during execution prior to shutdown, a new one will take its</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * place if needed to execute subsequent tasks.)  Tasks are</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * guaranteed to execute sequentially, and no more than one task</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * will be active at any given time. Unlike the otherwise</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * equivalent {@code newScheduledThreadPool(1, threadFactory)}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * the returned executor is guaranteed not to be reconfigurable to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * use additional threads.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @param threadFactory the factory to use when creating new</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * threads</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @return a newly created scheduled executor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     * @throws NullPointerException if threadFactory is null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>在想要单活跃线程时，二者等价，在线程由于执行器被中断时，都会启动一个新线程执行后续任务，但<code>newSingleThreadScheduledExecutor()</code>保证执行器不会被重新配置以使用额外的线程，这个才是最大区别的地方。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="workstealingpool18">WorkStealingPool（1.8）<a href="#workstealingpool18" class="hash-link" aria-label="WorkStealingPool（1.8）的直接链接" title="WorkStealingPool（1.8）的直接链接">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newWorkStealingPool(int parallelism) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ForkJoinPool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (parallelism,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             null, true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public static ExecutorService newWorkStealingPool() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return new ForkJoinPool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            (Runtime.getRuntime().availableProcessors(),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">             null, true);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><strong>特征：</strong></p><ul><li>使用<code>ForkJoinPool</code></li><li>并发、抢占式执行</li><li>FIFO 调度模式</li></ul><p><strong>应用场景：</strong></p><ul><li>处理 CPU 密集型的任务，确保 CPU 在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务</li></ul>]]></content:encoded>
            <category>java</category>
            <category>线程池</category>
        </item>
        <item>
            <title><![CDATA[JVM 必会的知识]]></title>
            <link>https://nekobox69.github.io/blog/tech/JVM必会的知识</link>
            <guid>https://nekobox69.github.io/blog/tech/JVM必会的知识</guid>
            <pubDate>Wed, 08 Jul 2020 13:28:05 GMT</pubDate>
            <description><![CDATA[1.内存模型]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1内存模型">1.内存模型<a href="#1内存模型" class="hash-link" aria-label="1.内存模型的直接链接" title="1.内存模型的直接链接">​</a></h2><p>可分为以下几部分：</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="栈">栈<a href="#栈" class="hash-link" aria-label="栈的直接链接" title="栈的直接链接">​</a></h3><p>方法的内存模型，一个方法对应一个栈帧，方法的执行就是入栈到出栈的过程。</p><p>包括：虚拟机栈（Java方法）和本地方法栈</p><p>栈帧包括：</p><ul><li><p>局部变量表</p><p>由局部变量槽（Slot）组成，在编译期间完成分配，方法在运行期间不会改变局部变量表的大小（变量槽的数量）</p><p>变量槽存储：</p><ul><li><p>基本数据类型</p><p>64位的类型会占2个槽，其他只占一个槽</p></li><li><p>对象引用（reference类型）</p></li><li><p>returnAddress类型（指向一条字节码指令的地址）</p></li></ul></li><li><p>操作数栈</p><p>执行方法时，存放操作数的栈</p></li><li><p>动态连接</p><p>为了支持在运行期间将符号引用转化为直接引用的操作</p></li><li><p>方法出口</p><p>返回地址为到调用该方法的指令的下一条指令的地址</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="堆">堆<a href="#堆" class="hash-link" aria-label="堆的直接链接" title="堆的直接链接">​</a></h3><p>存放：对象实例、数组、线程本地缓冲区（TLAB）</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="方法区">方法区<a href="#方法区" class="hash-link" aria-label="方法区的直接链接" title="方法区的直接链接">​</a></h3><p>会存储：类型信息、常量、静态变量、即时编译器编译后的代码缓存</p><p>有个运行时常量池：class的常量池表、运行时新的常量</p><p>回收目标：针对常量池的回收和对类型的卸载</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="程序计数器">程序计数器<a href="#程序计数器" class="hash-link" aria-label="程序计数器的直接链接" title="程序计数器的直接链接">​</a></h3><p>字节码的行号提示器，会记录正在执行的虚拟机字节码指令地址，如果正在执行的是本地方法则为空。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-对象创建过程">2. 对象创建过程<a href="#2-对象创建过程" class="hash-link" aria-label="2. 对象创建过程的直接链接" title="2. 对象创建过程的直接链接">​</a></h2><ol><li><p>检测new指令的参数是否能在常量池定位到一个类的符号引用</p></li><li><p>检查符号引用代表的类是否已经被加载、解析、初始化</p><p>没有，就执行相应的类加载过程</p></li><li><p>分配内存空间（大小在类加载完后可以完全确定）</p><p>分配方法：</p><ul><li><p>指针碰撞</p><p>绝对规整的堆上使用，一个指针作为分界点指示器，分配内存就是移动该指针</p><p>实现方案：CAS</p></li><li><p>空闲列表</p><p>记录哪些内存块可用，分配时从中查找足够大的空间分配，并更新列表</p><p>实现方案：TLAB（把内存分配的动作按照线程划分在不同的空间之中，每个线程在Java堆中预先分配一小块内存）</p></li></ul></li><li><p>初始化位零值（不包括对象头）</p><p>使用TLAB时，会提前至TLAB分配时进行</p></li><li><p>设置对象（设置对象头）</p><p>一般包括：</p><ul><li>哪个类的实例</li><li>指向元数据信息</li><li>GC分代年龄</li><li>是否启用偏向锁</li></ul></li><li><p>执行构造函数</p></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-对象内存布局">3. 对象内存布局<a href="#3-对象内存布局" class="hash-link" aria-label="3. 对象内存布局的直接链接" title="3. 对象内存布局的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="对象头">对象头<a href="#对象头" class="hash-link" aria-label="对象头的直接链接" title="对象头的直接链接">​</a></h3><ul><li><p>Markword</p><p>8字节，记录：锁信息、GC信息、Hashcode</p></li><li><p>类型指针</p><p>指向类型元数据</p></li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="实例数据">实例数据<a href="#实例数据" class="hash-link" aria-label="实例数据的直接链接" title="实例数据的直接链接">​</a></h3><p>存储类型的字段内容</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="对齐填充">对齐填充<a href="#对齐填充" class="hash-link" aria-label="对齐填充的直接链接" title="对齐填充的直接链接">​</a></h3><p>被8整除补齐用</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-对象访问定位">4. 对象访问定位<a href="#4-对象访问定位" class="hash-link" aria-label="4. 对象访问定位的直接链接" title="4. 对象访问定位的直接链接">​</a></h2><p>通过栈上的reference数据操作堆上的具体对象</p><ul><li><p>句柄</p><p>堆上划分空间作为句柄池，池中存放：</p><ul><li>对象实例数据地址</li><li>类型数据指针</li></ul><p>优点：栈中存储的是句柄地址，在对象被移动时只会修改句柄中的实例数据指针，reference对象不需要修改</p><p>缺点：访问实例数据多一次指针定位开销</p></li><li><p>直接指针</p><p>存储：</p><ul><li>对象实例数据</li><li>对象类型数据指针</li></ul><p>优点：速度快</p><p>缺点：对象被移动时需要修改栈中reference存储的值</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-对象存活判断方法">5. 对象存活判断方法<a href="#5-对象存活判断方法" class="hash-link" aria-label="5. 对象存活判断方法的直接链接" title="5. 对象存活判断方法的直接链接">​</a></h2><ul><li><p>引用计数算法</p><p>引用对象时，计数器值就加一；当引用失效时，计数器值就减一</p><p>缺点：无法解决循环引用问题</p></li><li><p>可达性分析算法</p><p>以一系列GC Roots的根对象为起点集，根据引用关系向下搜索，如果对象到GC Roots间不可达，则对象不再被引用</p><p>处理流程：</p><ol><li><p>判断对象时否可达</p></li><li><p>不可达，进行标记</p></li><li><p>筛选标记对象</p><p>需要执行finalized方法的加入F-Queue队列，执行队列中的finalized方法，如果对象重新关连上GCRoots就表示存活</p></li><li><p>对F-Queue中的对象进行第二次小规模标记</p><p>移除重新关联上的对象</p></li></ol></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-可作为-gc-root-的对象">6. 可作为 GC Root 的对象<a href="#6-可作为-gc-root-的对象" class="hash-link" aria-label="6. 可作为 GC Root 的对象的直接链接" title="6. 可作为 GC Root 的对象的直接链接">​</a></h2><ul><li>栈帧中本地变量表中引用的对象</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI引用的对象</li><li>虚拟机内部的引用</li><li>所有被同步锁（synchronized关键字）持有的对象</li><li>反应Java虚拟机内部情况的JM XBean、JVM TI 中注册的回调、本地代码缓存等</li><li>垃圾收集器的特性而加入的对象</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-gc-算法">7. GC 算法<a href="#7-gc-算法" class="hash-link" aria-label="7. GC 算法的直接链接" title="7. GC 算法的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-gc收集器">8. GC收集器<a href="#8-gc收集器" class="hash-link" aria-label="8. GC收集器的直接链接" title="8. GC收集器的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="9-类加载机制">9. 类加载机制<a href="#9-类加载机制" class="hash-link" aria-label="9. 类加载机制的直接链接" title="9. 类加载机制的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="10类加载过程">10.类加载过程<a href="#10类加载过程" class="hash-link" aria-label="10.类加载过程的直接链接" title="10.类加载过程的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="11-双亲委派机制">11. 双亲委派机制<a href="#11-双亲委派机制" class="hash-link" aria-label="11. 双亲委派机制的直接链接" title="11. 双亲委派机制的直接链接">​</a></h2><h2 class="anchor anchorWithStickyNavbar_LWe7" id="12-类加载器有哪些">12. 类加载器有哪些<a href="#12-类加载器有哪些" class="hash-link" aria-label="12. 类加载器有哪些的直接链接" title="12. 类加载器有哪些的直接链接">​</a></h2>]]></content:encoded>
            <category>java</category>
            <category>jvm</category>
        </item>
        <item>
            <title><![CDATA[Redis 发布订阅模式]]></title>
            <link>https://nekobox69.github.io/blog/tech/Redis发布订阅模式</link>
            <guid>https://nekobox69.github.io/blog/tech/Redis发布订阅模式</guid>
            <pubDate>Fri, 03 Jul 2020 14:23:45 GMT</pubDate>
            <description><![CDATA[Redis 是一个 key-value 的存储系统，通常用来做缓存，也有人用来做数据库。然而它还提供了发布订阅模式，通过这种模式就可以把它当作 MQ 来用。]]></description>
            <content:encoded><![CDATA[<p>Redis 是一个 key-value 的存储系统，通常用来做缓存，也有人用来做数据库。然而它还提供了发布订阅模式，通过这种模式就可以把它当作 MQ 来用。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="工作模式">工作模式<a href="#工作模式" class="hash-link" aria-label="工作模式的直接链接" title="工作模式的直接链接">​</a></h2><p><strong>发送者</strong>：只负责向订阅频道发布消息，不需要关心被谁订阅、有多少订阅者</p><p><strong>订阅者</strong>：只负责订阅感兴趣的频道（可以 1 个或多个），并不需要知道发布者是谁</p><p>发送者与订阅者完全解耦，具有更大的可伸缩性和动态性。（与 NSQ 原理很类似）</p><p>当然，Redis 不是专门的 MQ，具有局限性：</p><ul><li>需要订阅后才能消费，没订阅前的消息无法收到</li><li>无法确保消息的送达</li><li>不能多次消费</li></ul><blockquote><p>对消息传递有要求的场景还是老老实实去用传统的 MQ 吧。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="命令">命令<a href="#命令" class="hash-link" aria-label="命令的直接链接" title="命令的直接链接">​</a></h2><p>发布订阅模式提供了 6 种操作命令。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="订阅">订阅<a href="#订阅" class="hash-link" aria-label="订阅的直接链接" title="订阅的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="psubscribe">PSUBSCRIBE<a href="#psubscribe" class="hash-link" aria-label="PSUBSCRIBE的直接链接" title="PSUBSCRIBE的直接链接">​</a></h4><p><code>PSUBSCRIBE pattern [pattern ...]</code></p><p>订阅一个或多个符合给定模式（正则表达式）的频道。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="subscribe">SUBSCRIBE<a href="#subscribe" class="hash-link" aria-label="SUBSCRIBE的直接链接" title="SUBSCRIBE的直接链接">​</a></h4><p><code>SUBSCRIBE channel [channel ...]</code></p><p>订阅给定的一个或多个频道的信息。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="发布">发布<a href="#发布" class="hash-link" aria-label="发布的直接链接" title="发布的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="publish">PUBLISH<a href="#publish" class="hash-link" aria-label="PUBLISH的直接链接" title="PUBLISH的直接链接">​</a></h4><p><code>PUBLISH channel message</code></p><p>将信息发送到指定的频道。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="退订">退订<a href="#退订" class="hash-link" aria-label="退订的直接链接" title="退订的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="punsubscribe">PUNSUBSCRIBE<a href="#punsubscribe" class="hash-link" aria-label="PUNSUBSCRIBE的直接链接" title="PUNSUBSCRIBE的直接链接">​</a></h4><p><code>PUNSUBSCRIBE [pattern [pattern ...]]</code></p><p>退订给定模式（正则表达式）的频道，无参则退订全部。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="unsubscribe">UNSUBSCRIBE<a href="#unsubscribe" class="hash-link" aria-label="UNSUBSCRIBE的直接链接" title="UNSUBSCRIBE的直接链接">​</a></h4><p><code>UNSUBSCRIBE [channel [channel ...]]</code></p><p>退订给定的频道。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="状态">状态<a href="#状态" class="hash-link" aria-label="状态的直接链接" title="状态的直接链接">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pubsub">PUBSUB<a href="#pubsub" class="hash-link" aria-label="PUBSUB的直接链接" title="PUBSUB的直接链接">​</a></h4><p><code>PUBSUB subcommand [argument [argument ...]]</code></p><p>查看订阅与发布系统状态</p><p><code>PUBSUB CHANNELS [pattern]</code></p><p>列出当前活动的通道。活动通道是带有一个或多个订阅者（不包括订阅模式的客户端）的发布/订阅通道。</p><p><code>PUBSUB NUMSUB [channel-1 ... channel-N]</code></p><p>返回指定通道的订阅方数量（不包括订阅模式的客户端）。</p><p><code>PUBSUB NUMPAT</code></p><p>返回模式的订阅数量（使用 PSUBSCRIBE 命令执行）。请注意，这不仅是订阅模式的客户端数量，而且是所有客户端订阅模式的总数。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="开启事件通知">开启事件通知<a href="#开启事件通知" class="hash-link" aria-label="开启事件通知的直接链接" title="开启事件通知的直接链接">​</a></h2><p>要使用发布订阅模式，需要开启事件通知，即需要设定<code>notify-keyspace-events</code>参数，类型是<code>string</code>的（记得改配置文件时保持引号，命令行不需要引号），默认是空字符串。</p><p><code>notify-keyspace-events</code>有以下参数（基于 Redis 6.0.5）：</p><ul><li><code>K</code>：键空间事件，使用<code>keyspace@&lt;db&gt;</code> 前缀发布</li><li><code>E</code>：键空间事件，使用<code>keyevent@&lt;db&gt;</code> 前缀发布</li><li><code>g</code>：泛型命令（非类型特定），如<code>DEL</code>、<code>EXPIRE</code>、<code>RENAME</code></li><li><code>$</code>：String 命令</li><li><code>l</code>：List 命令</li><li><code>s</code>：Set 命令</li><li><code>h</code>：Hash 命令</li><li><code>z</code>：SortedSet 命令</li><li><code>x</code>：过期事件，每次键过期时生成的事件</li><li><code>e</code>：驱逐事件，由于键达到 max memory 而生成的驱逐事件</li><li><code>t</code>：Stream 命令</li><li><code>m</code>：键错过事件（key-miss event），注意：它不包括在<code>A</code>中</li><li><code>A</code>：<code>g$lshzxet</code>的别名，所以<code>AKE</code>就代表了所有事件（除了因其独特的性质而被排除在<code>A</code>之外的关键遗漏事件）</li></ul><blockquote><p>初见<code>key-miss event</code>没反应过来是指的什么，后来才明白，是访问的 key 不在 Redis 时触发的事件。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="实战">实战<a href="#实战" class="hash-link" aria-label="实战的直接链接" title="实战的直接链接">​</a></h2><ol><li><p>开启事件通知</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli config </span><span class="token builtin class-name">set</span><span class="token plain"> notify-keyspace-events KEAm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OK</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p><code>m</code>在 Redis 6 以上才支持</p></blockquote></li><li><p>订阅频道</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli psubscribe *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Reading messages</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">press Ctrl-C to quit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"subscribe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">integer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li><li><p>操作</p><p>操作内容：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli publish </span><span class="token builtin class-name">test</span><span class="token plain"> testp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">integer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli </span><span class="token builtin class-name">set</span><span class="token plain"> a hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli get b</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli </span><span class="token builtin class-name">set</span><span class="token plain"> c hello EX </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OK</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>订阅窗口：</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> redis-cli psubscribe *</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Reading messages</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">. </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">press Ctrl-C to quit</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"psubscribe"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">integer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># redis-cli publish test testp</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"testp"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># redis-cli set a hello</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyspace@0__:a"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"set"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyevent@0__:set"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"a"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># redis-cli get b</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyspace@0__:b"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"keymiss"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyevent@0__:keymiss"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># redis-cli set c hello EX 2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyspace@0__:c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"set"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyevent@0__:set"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyspace@0__:c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"expire"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyevent@0__:expire"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyspace@0__:c"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"expired"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"pmessage"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"*"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"__keyevent@0__:expired"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="代码实现">代码实现<a href="#代码实现" class="hash-link" aria-label="代码实现的直接链接" title="代码实现的直接链接">​</a></h2><p>用 Go 来实现一个例子。</p><p>先初始化工程，并下载<a href="https://github.com/go-redis/redis" target="_blank" rel="noopener noreferrer" title="go-redis">go-redis</a></p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> go mod init redis-robot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">go: creating new go.mod: module redis-robot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> go get github.com/go-redis/redis/v8</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>main.go</p><div class="language-go codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-go codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Package main Nekobox69 Create at 2020-07-03 21:44</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"log"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"strings"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/go-redis/redis/v8"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> channel </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">robot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">client </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">redis</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Client</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sub </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">PSubscribe</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">defer</span><span class="token plain"> sub</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Close</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> sub</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ReceiveMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> err </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">continue</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Receive: %+v\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    client </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> redis</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewClient</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">redis</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Options</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Addr</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">     </span><span class="token string" style="color:#e3116c">"localhost:6379"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Password</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// no password set</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        DB</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">       </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// use default DB</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ctx </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Context</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Ping</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Result</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> err </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Error</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">robot</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">client</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    client</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Publish</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> channel</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"hi"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Sleep</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">10</span><span class="token operator" style="color:#393A34">*</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Second</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content:encoded>
            <category>redis</category>
            <category>发布订阅</category>
        </item>
        <item>
            <title><![CDATA[NSQ 介绍]]></title>
            <link>https://nekobox69.github.io/blog/tech/NSQ基础知识</link>
            <guid>https://nekobox69.github.io/blog/tech/NSQ基础知识</guid>
            <pubDate>Thu, 02 Jul 2020 12:33:17 GMT</pubDate>
            <description><![CDATA[组成]]></description>
            <content:encoded><![CDATA[<p>组成</p><ul><li>nsqlookupd</li><li>nsqd</li><li>nsqadmin</li></ul><p>NSQ 是一个实时分布式消息传递平台。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="功能">功能<a href="#功能" class="hash-link" aria-label="功能的直接链接" title="功能的直接链接">​</a></h2><ul><li>支持没有 SPOF 的分布式拓扑</li><li>可水平扩展（无代理，无缝地向集群添加更多节点）</li><li>基于低延迟推送的消息传递（性能）</li><li>组合负载均衡和多播样式消息路由</li><li>擅长流媒体（高吞吐量）和面向工作（低吞吐量）工作负载</li><li>主要在内存中（超出高水位标记的消息透明地保存在磁盘上）</li><li>消费者查找生产者的运行时发现服务（nsqlookupd）</li><li>传输层安全性（TLS）</li><li>数据格式不可知</li><li>几个依赖项（易于部署）和一个理智，有界，默认配置</li><li>简单的 TCP 协议，支持任何语言的客户端库</li><li>统计信息，管理操作和生成器的 HTTP 接口（无需发布客户端库）</li><li>与 statsd 集成用于实时仪器</li><li>强大的集群管理界面（nsqadmin）</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="保障">保障<a href="#保障" class="hash-link" aria-label="保障的直接链接" title="保障的直接链接">​</a></h2><p>保证与任何分布式系统一样，实现目标是进行智能权衡。 通过对这些权衡的实际情况保持透明，我们希望对 NSQ 在生产中部署时的行为有所期待。</p><ul><li>消息不耐用（默认）
虽然系统支持“释放阀”（--mem-queue-size），然后消息将透明地保存在磁盘上，但它主要是内存中的消息传递平台。
--mem-queue-size 可以设置为 0，以确保所有传入的消息都持久保存到磁盘。 在这种情况下，如果节点发生故障，您可能会减少故障表面（即 OS 或底层 IO 子系统发生故障）。
没有内置复制。 但是，管理这种权衡的方式有多种，例如部署拓扑和技术，它们以容错的方式主动地将主题从主机并持久化到磁盘。</li><li>消息至少传递一次
由于各种原因，可以多次传递消息（客户端超时，断开连接，重新排队等）。 客户有责任执行幂等操作或重复数据删除。</li><li>消息未排序
不能依赖传递给消费者的消息顺序。
与消息传递语义类似，这是重新队列的结果，内存和磁盘存储的组合，以及每个 nsqd 节点不共享的事实。
通过在消费者中引入一个延迟窗口来接受消息并在处理之前对它们进行排序（但是，为了给定义的消费者它的消息是有序的而不是在整个集群中排序）是相对简单的。 保留这个不变量必须丢弃落在该窗口之外的消息）。</li><li>消费者最终找到所有主题生产者
发现服务（nsqlookupd）旨在最终保持一致。 nsqlookupd 节点不协调以维护状态或回答查询。
在分区的两端仍然可以回答查询的意义上，网络分区不会影响可用性。 部署拓扑具有减轻这些类型问题的最重要影响。</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="设计">设计<a href="#设计" class="hash-link" aria-label="设计的直接链接" title="设计的直接链接">​</a></h2><p>NSQ 是 simplequeue（simplehttp 的一部分）的继承者，因此设计为（没有特定的顺序）：</p><ul><li>支持拓扑，实现高可用性并消除 SPOF</li><li>解决了对更强大的消息传递保证的需求</li><li>限制单个进程的内存占用（通过将某些消息保存到磁盘）</li><li>大大简化了生产者和消费者的配置要求</li><li>提供简单的升级途径</li><li>提高效率</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="简化配置和管理">简化配置和管理<a href="#简化配置和管理" class="hash-link" aria-label="简化配置和管理的直接链接" title="简化配置和管理的直接链接">​</a></h3><p>单个 nsqd 实例旨在一次处理多个数据流。 流称为“主题”，主题具有 1 个或多个“通道”。 每个频道都会收到主题所有消息的副本。 实际上，通道映射到消耗主题的下游服务。</p><p>主题和渠道没有先验配置。 通过发布到命名主题或通过订阅命名主题上的通道来首次使用时创建主题。 首次使用时，通过订阅指定的频道创建频道。</p><p>主题和通道都相互独立地缓冲数据，防止缓慢的消费者导致其他渠道的积压（同样适用于主题级别）。</p><p>通道可以并且通常也会连接多个客户端。 假设所有连接的客户端都处于准备接收消息的状态，则每条消息将被传递到随机客户端。 例如：</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2019/gif/402881/1563258536398-eda18d05-0db6-43aa-9658-7867ac01800a.gif" alt="img" class="img_ev3q"></p><p>总而言之，消息是从主题 - &gt;通道（每个通道接收该主题的所有消息的副本）多播的，但是从通道 - &gt;消费者均匀分布（每个消费者接收该通道的一部分消息）。</p><p>NSQ 还包括一个辅助应用程序 nsqlookupd，它提供了一个目录服务，消费者可以在其中查找提供他们有兴趣订阅的主题的 nsqd 实例的地址。 在配置方面，这将消费者与生产者分离（他们都只需要知道在哪里联系 nsqlookupd 的常见实例，从不相互联系），从而降低了复杂性和维护。</p><p>在较低级别，每个 nsqd 具有与 nsqlookupd 的长期 TCP 连接，在该连接上它定期推送其状态。 此数据用于通知 nsqlookupd 将为消费者提供哪些 nsqd 地址。 对于消费者，将公开 HTTP <code>/lookup</code> 端点以进行轮询。</p><p>要引入主题的新的不同使用者，只需启动配置了 nsqlookupd 实例的地址的 NSQ 客户端。 添加新的使用者或新发布者不需要进行任何配置更改，从而大大降低了开销和复杂性。</p><p>注意：在将来的版本中，启发式 nsqlookupd 用于返回地址可以基于深度，连接的客户端数量或其他“智能”策略。 目前的实施就是全部。 最终，目标是确保所有生产者都被阅读，使深度保持接近零。</p><p>值得注意的是，nsqd 和 nsqlookupd 守护进程旨在独立运行，不需要兄弟之间的通信或协调。</p><p>我们还认为，有一种方法可以集中查看，内省和管理集群。 我们建立了 nsqadmin 来做到这一点。 它提供了一个 Web UI 来浏览主题/渠道/消费者的层次结构，并检查每个层的深度和其他关键统计数据。 此外，它还支持一些管理命令，例如删除和清空通道（当通道中的消息可以安全地丢弃以便将深度恢复为 0 时，这是一个有用的工具）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="简单的升级路径">简单的升级路径<a href="#简单的升级路径" class="hash-link" aria-label="简单的升级路径的直接链接" title="简单的升级路径的直接链接">​</a></h3><p>这是我们的最高优先事项之一。 我们的生产系统处理大量流量，所有流量都建立在我们现有的消息传递工具之上，因此我们需要一种方法来缓慢而有条不紊地升级基础架构的特定部分，几乎没有影响。</p><p>首先，在消息生产者方面，我们构建了 nsqd 来匹配 simplequeue。 具体来说，nsqd 将 HTTP <code>/put</code> 端点（就像 simplequeue 一样）暴露给 POST 二进制数据（有一点需要注意，端点需要另外一个指定“主题”的查询参数）。 想要切换到开始发布到 nsqd 的服务只需要进行少量的代码更改。</p><p>其次，我们在 Python 和 Go 中构建了库，这些库与我们现有库中习惯使用的功能和习惯相匹配。 通过将代码更改限制为引导，这简化了消息使用者方面的转换。 所有业务逻辑都保持不变。</p><p>最后，我们构建了实用程序来将新旧组件粘合在一起。 这些都可以在存储库的 examples 目录中找到：</p><ul><li>nsq_pubsub - 将类似 HTTP 接口的 pubsub 暴露给 NSQ 集群中的主题</li><li>nsq_to_file - 将给定主题的所有消息永久写入文件</li><li>nsq_to_http - 对主题中的所有消息执行 HTTP 请求到（多个）端点</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="消除-spof">消除 SPOF<a href="#消除-spof" class="hash-link" aria-label="消除 SPOF的直接链接" title="消除 SPOF的直接链接">​</a></h3><p>NSQ 旨在以分布式方式使用。 nsqd 客户端（通过 TCP）连接到提供指定主题的所有实例。 没有中间人，没有消息经纪人，也没有 SPOF：</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2019/png/402881/1563258635822-dcefdeda-b38f-4178-9e08-f5193deb5396.png" alt="tumblr_mat85kr5td1qj3yp2.png" class="img_ev3q"></p><p>此拓扑消除了链接单个聚合订阅源的需要。 而是直接从所有生产者消费。 从技术上讲，哪个客户端连接到哪个 NSQ 并不重要，只要有足够的客户端连接到所有生产者以满足消息量，就可以保证所有客户端最终都会被处理。</p><p>对于 nsqlookupd，通过运行多个实例来实现高可用性。 它们不直接相互通信，数据被认为最终是一致的。 消费者轮询所有已配置的 nsqlookupd 实例并将响应联合起来。 陈旧，不可访问或其他故障节点不会使系统停止运行。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="消息传递保证">消息传递保证<a href="#消息传递保证" class="hash-link" aria-label="消息传递保证的直接链接" title="消息传递保证的直接链接">​</a></h3><p>NSQ 保证消息将至少传送一次，尽管可能存在重复消息。 消费者应该期待这一点并重复数据删除或执行幂等操作。</p><p>此保证作为协议的一部分强制执行，其工作方式如下（假设客户端已成功连接并订阅了某个主题）：</p><ol><li>客户端表示他们已准备好接收消息</li><li>NSQ 发送消息并在本地临时存储数据（在重新排队或超时的情况下）</li><li>客户端分别回复指示成功或失败的 FIN（完成）或 REQ（重新排队）。 如果客户端没有回复 NSQ 将在可配置的持续时间后超时并自动重新排队消息）</li></ol><p>这可确保导致消息丢失的唯一边缘情况是 nsqd 进程的不正常关闭。 在这种情况下，内存中的任何消息（或任何未刷新到磁盘的缓冲写入）都将丢失。</p><p>如果防止消息丢失是最重要的，那么即使是这种边缘情况也可以减轻。 一种解决方案是站起来接收相同部分消息副本的冗余 nsqd 对（在不同的主机上）。 因为您已经将您的消费者编写为幂等的，所以对这些消息进行双倍时间没有下游影响，并且允许系统在不丢失消息的情况下忍受任何单个节点故障。</p><p>需要注意的是，NSQ 提供了构建模块，以支持各种生产用例和可配置的耐用性。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="有限的内存占用">有限的内存占用<a href="#有限的内存占用" class="hash-link" aria-label="有限的内存占用的直接链接" title="有限的内存占用的直接链接">​</a></h3><p>nsqd 提供了一个配置选项--mem-queue-size，它将确定给定队列在内存中保留的消息数。 如果队列的深度超过此阈值，则消息将透明地写入磁盘。 这将给定 nsqd 进程的内存占用限制为 mem-queue-size <!-- -->*<!-- --> #<!-- -->_<!-- -->of_channels_and_topics</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2019/png/402881/1563258655888-88847820-63eb-4cb3-a7c9-2acf37647542.png" alt="tumblr_mavte17V3t1qj3yp2.png" class="img_ev3q"></p><p>此外，精明的观察者可能已经确定这是通过将此值设置为低（例如 1 或甚至 0）来获得更高的交付保证的便捷方式。 磁盘支持的队列旨在经受不干净的重启（尽管消息可能会被传递两次）。</p><p>此外，与消息传递保证相关，干净关闭（通过向 nsqd 进程发送 TERM 信号）可以安全地保留当前在内存中，传输中，延迟和各种内部缓冲区中的消息。</p><p>注意，名称以字符串`<code>#ephemeral</code>结尾的主题/频道不会缓存到磁盘，而是在传递 mem-queue-size 后丢弃消息。 这使得不需要消息保证的消费者能够订阅频道。 在最后一个客户端断开连接后，这些短暂的通道也将消失。 对于短暂的主题，这意味着已经创建，使用和删除了至少一个频道（通常是短暂的频道）。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="效率">效率<a href="#效率" class="hash-link" aria-label="效率的直接链接" title="效率的直接链接">​</a></h3><p>NSQ 旨在通过“memcached-like”命令协议与简单的大小前缀响应进行通信。所有消息数据都保存在核心中，包括尝试次数，时间戳等元数据。这消除了从服务器到客户端来回复制数据，这是重新排队消息时先前工具链的固有属性。这也简化了客户端，因为他们不再需要负责维护消息状态。</p><p>此外，通过降低配置复杂性，设置和开发时间大大减少（特别是在主题有&gt; 1 个消费者的情况下）。</p><p>对于数据协议，我们做出了一项关键设计决策，通过将数据推送到客户端而不是等待它来提高性能和吞吐量。这个概念，我们称之为 RDY 状态，实质上是客户端流控制的一种形式。</p><p>当客户端连接到 nsqd 并订阅某个通道时，它将处于 RDY 状态 0.这意味着不会向客户端发送任何消息。当客户端准备好接收消息时，它会发送一个命令，将其 RDY 状态更新为准备处理的某些＃，例如 100.没有任何其他命令，100 条消息将被推送到客户端，因为它们可用（每次递减）该客户端的服务器端 RDY 计数）。</p><p>客户端库旨在发送命令以在达到可配置的<code>max-in-flight</code>设置的~25％时更新 RDY 计数（并正确考虑到多个 nsqd 实例的连接，进行适当划分）</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2019/png/402881/1563258977977-87f12480-5584-4f06-96d6-c036d7d78c7f.png" alt="tumblr_mataigNDn61qj3yp2.png" class="img_ev3q"></p><p>这是一个重要的性能旋钮，因为一些下游系统能够更容易地批量处理消息并从更高的<code>max-in-flight</code>中获益。</p><p>值得注意的是，因为它具有缓冲和推送功能，能够满足流（通道）的独立副本的需要，所以我们已经生成了一个类似于 simplequeue 和 pubsub 组合的守护进程。 这在简化我们系统的拓扑方面非常强大，我们传统上维护上面讨论的旧工具链。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="go">Go<a href="#go" class="hash-link" aria-label="Go的直接链接" title="Go的直接链接">​</a></h3><p>我们早期做出了战略决策，在 Go 中构建 NSQ 核心。 我们最近在博客上写了关于我们对 Go 的使用，并提到了这个项目 - 浏览该帖子以了解我们对语言的看法可能会有所帮助。</p><p>关于 NSQ，Go 通道（不要与 NSQ 通道混淆）和语言内置的并发功能非常适合 nsqd 的内部工作。 我们利用缓冲通道来管理内存消息队列，并无缝地将溢出写入磁盘。</p><p>标准库可以轻松编写网络层和客户端代码。 内置的内存和 cpu 分析钩子突出了优化的机会，并且需要很少的集成工作。 我们还发现，单独测试组件，使用接口模拟类型以及迭代构建功能非常容易。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="内部构件">内部构件<a href="#内部构件" class="hash-link" aria-label="内部构件的直接链接" title="内部构件的直接链接">​</a></h2><p>NSQ 由 3 个守护进程组成：</p><ul><li>nsqd 是接收，排队和向客户端传递消息的守护程序。</li><li>nsqlookupd 是管理拓扑信息并提供最终一致的发现服务的守护程序。</li><li>nsqadmin 是一个 Web UI，可以实时内省集群（并执行各种管理任务）。</li></ul><p>NSQ 中的数据流被建模为流和消费者的树。 主题是不同的数据流。 频道是订阅特定主题的消费者的逻辑分组。</p><p>单个 nsqd 可以有很多主题，每个主题可以有很多通道。 通道接收主题的所有消息的副本，在通道上的每个消息在其订户之间分发时启用多播样式传送，从而实现负载平衡。</p><p>这些原语构成了表达各种简单和复杂拓扑的强大框架。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="主题与通道">主题与通道<a href="#主题与通道" class="hash-link" aria-label="主题与通道的直接链接" title="主题与通道的直接链接">​</a></h3><p>主题和通道，NSQ 的核心原语，最能说明系统设计如何无缝转换为 Go 的功能。</p><p>Go 的通道（以下称为“go-chan”用于消除歧义）是表达队列的自然方式，因此 NSQ 主题/通道的核心只是消息指针的缓冲转发。 缓冲区的大小等于--mem-queue-size 配置参数。</p><p>从线上读取数据后，向主题发布消息的行为包括：</p><ol><li>Message 结构的实例化（以及消息体[]字节的分配）</li><li>读取锁定以获取主题</li><li>读锁以检查发布的能力</li><li>发送缓冲的 go-chan</li></ol><p>为了从主题到其通道获取消息，主题不能依赖于典型的 go-chan 接收语义，因为在 go-chan 上接收的多个 goroutine 将分发消息，而期望的最终结果是将每个消息复制到每个通道（goroutine）。</p><p>相反，每个主题都维护着 3 个主要的 goroutine。 第一个称为路由器，负责从传入的 go-chan 读取新发布的消息并将它们存储在队列（内存或磁盘）中。</p><p>第二个叫做 messagePump，负责将消息复制并推送到通道，如上所述。</p><p>第三个负责 DiskQueue IO，稍后将讨论。</p><p>通道稍微复杂一点，但是共享暴露单个输入和单个输出 go-chan 的基本目标（以抽象出内部消息可能在内存或磁盘上的事实）：</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2019/png/402881/1563261049592-5a5f0207-3183-4872-8332-0b7d593ad9dc.png" alt="682fc358-5f76-11e3-9b05-3d5baba67f13.png" class="img_ev3q"></p><p>此外，每个通道维护 2 个按时间排序的优先级队列，负责延迟和正在进行的消息超时（以及 2 个随附的 goroutine 用于监控它们）。</p><p>通过管理每通道数据结构来改进并行化，而不是依赖于 Go 运行时的全局计时器调度程序。</p><p>注意：在内部，Go 运行时使用单个优先级队列和 goroutine 来管理计时器。 这支持（但不限于）整个时间包。 它通常不需要用户时间排序的优先级队列，但重要的是要记住它是一个单一锁定的数据结构，可能会影响 GOMAXPROCS&gt; 1 的性能。 请参阅 runtime / time.go。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="后端-diskqueue">后端/ DiskQueue<a href="#后端-diskqueue" class="hash-link" aria-label="后端/ DiskQueue的直接链接" title="后端/ DiskQueue的直接链接">​</a></h3><p>NSQ 的设计目标之一是限制内存中保存的消息数量。 它通过 DiskQueue（它拥有主题或通道的第三个主要 goroutine）透明地将消息溢出写入磁盘来实现此目的。</p><p>由于内存队列只是一个 go-chan，如果可能的话，首先将消息路由到内存是很简单的，然后回退到磁盘：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">for msg := range c.incomingMsgChan {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    select {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    case c.memoryMsgChan &lt;- msg:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        err := WriteMessageToBackend(&amp;msgBuf, msg, c.backend)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if err != nil {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // ... handle errors ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>利用 Go 的 select 语句，只需几行代码即可表示此功能：上述默认情况仅在 memoryMsgChan 已满时执行。</p><p>NSQ 还具有短暂主题/渠道的概念。 它们丢弃消息溢出（而不是写入磁盘）并在它们不再有客户订阅时消失。 这是 Go 接口的完美用例。 主题和通道具有声明为后端接口而不是具体类型的结构成员。 正常主题和通道使用 DiskQueue，而 DummyBackendQueue 中使用短暂的存根，实现无操作后端。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="降低-gc-压力">降低 GC 压力<a href="#降低-gc-压力" class="hash-link" aria-label="降低 GC 压力的直接链接" title="降低 GC 压力的直接链接">​</a></h3><p>在任何垃圾收集环境中，您都会受到吞吐量（执行有用工作），延迟（响应性）和驻留集大小（占用空间）之间的紧张关系。</p><p>从 Go 1.2 开始，GC 就是标记 - 扫描（并行），非代数，非压缩，停止世界，而且大多数都是精确的。 它大部分都是精确的，因为其余的工作没有及时完成（它是针对 Go 1.3）。</p><p>Go GC 肯定会继续改进，但普遍的事实是：你创造的垃圾越少，你收集的时间就越少。</p><p>首先，了解 GC 在实际工作负载下的表现非常重要。 为此，nsqd 以 statsd 格式（以及其他内部指标）发布 GC 统计数据。 nsqadmin 显示这些指标的图表，让您深入了解 GC 在频率和持续时间方面的影响.</p><p>为了真正减少垃圾，您需要知道它的生成位置。 Go 工具链再一次提供了答案：</p><ul><li>使用测试包并使用 <strong>go test -benchmem</strong>来测试热代码路径。 它描述了每次迭代的分配数量（基准运行可以与 benchcmp 进行比较）。</li><li>使用<strong>go build -gcflags -m</strong>构建，输出转义分析的结果。</li></ul><p>考虑到这一点，以下优化证明对 nsqd 很有用</p><ul><li>避免[]字节到字符串转换。</li><li>重用缓冲区或对象（有一天可能是 sync.Pool 又是问题 4720）。</li><li>预分配切片（指定 make 中的容量）并始终知道线上项目的数量和大小。</li><li>对各种可配置拨号应用合理的限制（例如消息大小）。</li><li>避免装箱（使用 interface {}）或不必要的包装器类型（比如“多值”go-chan 的结构）。</li><li>避免在热代码路径中使用延迟（它分配）。</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tcp-协议">TCP 协议<a href="#tcp-协议" class="hash-link" aria-label="TCP 协议的直接链接" title="TCP 协议的直接链接">​</a></h3><p>NSQ TCP 协议是一个很好的例子，其中使用这些 GC 优化概念产生了很大的效果。</p><p>该协议采用长度前缀帧结构，使编码和解码变得简单和高效：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[x][x][x][x][x][x][x][x][x][x][x][x]...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  (int32) ||  (int32) || (binary)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|  4-byte  ||  4-byte  || N-byte</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------------------...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    size      frame ID     data</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>由于帧的组件的确切类型和大小是提前知道的，我们可以避免<a href="http://golang.org/pkg/encoding/binary/" target="_blank" rel="noopener noreferrer"><code>encoding/binary</code></a>包的方便性 <a href="http://golang.org/pkg/encoding/binary/#Read" target="_blank" rel="noopener noreferrer"><code>Read()</code></a>和<a href="http://golang.org/pkg/encoding/binary/#Write" target="_blank" rel="noopener noreferrer"><code>Write()</code></a>包装器（及其无关的接口查找和转换），而是调用适当的二进制文件<a href="http://golang.org/pkg/encoding/binary/#ByteOrder" target="_blank" rel="noopener noreferrer"><code>binary.BigEndian</code></a> 方法直接。</p><p>为了减少套接字 IO 系统调用，客户端 net.Conn 包含 bufio.Reader 和 bufio.Writer。 Reader 公开了 ReadSlice（），它重用了它的内部缓冲区。 这在读取插座时几乎消除了分配，大大降低了 GC 的压力。 这是可能的，因为与大多数命令相关联的数据不会转义（在不是这样的边缘情况下，数据被显式复制）。</p><p>在更低级别，MessageID 被声明为<!-- -->[16]<!-- -->字节，以便能够将其用作映射键（切片不能用作映射键）。 但是，由于从套接字读取的数据存储为[]字节，而不是通过分配字符串键产生垃圾，并且为了避免从切片到 MessageID 的后备数组的副本，使用不安全的包直接转换切片到一个 MessageID：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">id := *(*nsq.MessageID)(unsafe.Pointer(&amp;msgID))</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>注意：这是一个黑客。 如果编译器对此进行了优化并且问题 3512 可以解决此问题，则没有必要。 它还值得阅读问题 5376，该问题讨论了“const like”字节类型的可能性，它可以在接受字符串的情况下互换使用，而无需分配和复制。</p><p>类似地，Go 标准库仅在字符串上提供数字转换方法。 为了避免字符串分配，nsqd 使用直接在[]字节上操作的自定义基本 10 转换方法。</p><p>这些似乎是微优化，但 TCP 协议包含一些最热门的代码路径。 总的来说，它们以每秒数万条消息的速度，对分配数量和开销产生了重大影响：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">benchmark                    old ns/op    new ns/op    delta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Data           3575         1963  -45.09%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">benchmark                    old ns/op    new ns/op    delta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub256        57964        14568  -74.87%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub512        58212        16193  -72.18%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub1k         58549        19490  -66.71%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub2k         63430        27840  -56.11%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">benchmark                   old allocs   new allocs    delta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub256           56           39  -30.36%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub512           56           39  -30.36%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub1k            56           39  -30.36%</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">BenchmarkProtocolV2Sub2k            58           42  -27.59%</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="http">HTTP<a href="#http" class="hash-link" aria-label="HTTP的直接链接" title="HTTP的直接链接">​</a></h3><p>NSQ 的 HTTP API 建立在 Go 的 net / http 包之上。 因为它只是 HTTP，所以几乎任何现代编程环境都可以使用它，而无需特殊的客户端库。</p><p>它的简洁性掩盖了它的强大功能，因为 Go 的 HTTP 工具箱最有趣的一个方面是它支持的各种调试功能。 net / http / pprof 包直接与本机 HTTP 服务器集成，公开端点以检索 CPU，堆，goroutine 和 OS 线程配置文件。 这些可以直接从 go 工具中定位：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ go tool pprof http://127.0.0.1:4151/debug/pprof/profile</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这对于调试和分析正在运行的进程非常有价值！</p><p>此外，/stats 端点以 JSON 或漂亮打印的文本返回大量度量标准，使管理员可以轻松实时地从命令行进行内省：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">$ watch -n 0.5 'curl -s http://127.0.0.1:4151/stats | grep -v connected'</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>这产生连续输出，如：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[page_views     ] depth: 0     be-depth: 0     msgs: 105525994 e2e%: 6.6s, 6.2s, 6.2s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [page_view_counter        ] depth: 0     be-depth: 0     inflt: 432  def: 0    re-q: 34684 timeout: 34038 msgs: 105525994 e2e%: 5.1s, 5.1s, 4.6s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [realtime_score           ] depth: 1828  be-depth: 0     inflt: 1368 def: 0    re-q: 25188 timeout: 11336 msgs: 105525994 e2e%: 9.0s, 9.0s, 7.8s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [variants_writer          ] depth: 0     be-depth: 0     inflt: 592  def: 0    re-q: 37068 timeout: 37068 msgs: 105525994 e2e%: 8.2s, 8.2s, 8.2s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[poll_requests  ] depth: 0     be-depth: 0     msgs: 11485060 e2e%: 167.5ms, 167.5ms, 138.1ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [social_data_collector    ] depth: 0     be-depth: 0     inflt: 2    def: 3    re-q: 7568  timeout: 402   msgs: 11485060 e2e%: 186.6ms, 186.6ms, 138.1ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[social_data    ] depth: 0     be-depth: 0     msgs: 60145188 e2e%: 199.0s, 199.0s, 199.0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [events_writer            ] depth: 0     be-depth: 0     inflt: 226  def: 0    re-q: 32584 timeout: 30542 msgs: 60145188 e2e%: 6.7s, 6.7s, 6.7s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [social_delta_counter     ] depth: 17328 be-depth: 7327  inflt: 179  def: 1    re-q: 155843 timeout: 11514 msgs: 60145188 e2e%: 234.1s, 234.1s, 231.8s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[time_on_site_ticks] depth: 0     be-depth: 0     msgs: 35717814 e2e%: 0.0ns, 0.0ns, 0.0ns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    [tail821042#ephemeral     ] depth: 0     be-depth: 0     inflt: 0    def: 0    re-q: 0     timeout: 0     msgs: 33909699 e2e%: 0.0ns, 0.0ns, 0.0ns</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>最后，每个新的 Go 版本通常都会带来可衡量的性能提升。 对最新版本的 Go 进行重新编译提供免费提升时总是很好！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="依赖">依赖<a href="#依赖" class="hash-link" aria-label="依赖的直接链接" title="依赖的直接链接">​</a></h3><p>来自其他生态系统，Go 的管理依赖关系的哲学（或缺乏）需要一点时间来习惯。</p><p>NSQ 从一个单一的巨型仓库发展而来，具有相对进口，内部包之间几乎没有分离，完全接受关于结构和依赖管理的推荐最佳实践。</p><p>有两种主要的思想流派：</p><ol><li>供应：将正确修订的依赖项复制到应用程序的存储库中，并修改导入路径以引用本地副本。</li><li>Virtual Env：列出您需要的依赖项的修订版，并在构建时生成包含这些固定依赖项的原始 GOPATH 环境。</li></ol><p>注意：这实际上仅适用于二进制包，因为对于可导入包来说，对于使用哪个版本的依赖项做出中间决策是没有意义的。</p><p>NSQ 使用 gpm 为上面的（2）提供支持。</p><p>它的工作原理是将您的依赖项记录在 Godeps 文件中，我们稍后将其用于构建 GOPATH 环境。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="测试">测试<a href="#测试" class="hash-link" aria-label="测试的直接链接" title="测试的直接链接">​</a></h3><p>Go 为编写测试和基准测试提供了坚实的内置支持，因为 Go 使得并发操作的建模变得如此简单，所以在测试环境中建立一个完整的 nsqd 实例是微不足道的。</p><p>但是，初始实现的一个方面成为测试的问题：全局状态。最明显的罪犯是使用一个全局变量，该变量在运行时保存对 nsqd 实例的引用，即 var nsqd <!-- -->*<!-- --> NSQd。</p><p>某些测试会通过使用短格式变量赋值（即 nsqd：= NewNSQd（...））无意中在本地范围内屏蔽此全局变量。这意味着全局引用并未指向当前正在运行的实例，从而破坏了测试。</p><p>要解决此问题，将传递一个 Context 结构，其中包含配置元数据和对父 nsqd 的引用。所有对全局状态的引用都被本地上下文替换，允许子（主题，通道，协议处理程序等）安全地访问此数据并使其更可靠地进行测试。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="稳健性">稳健性<a href="#稳健性" class="hash-link" aria-label="稳健性的直接链接" title="稳健性的直接链接">​</a></h3><p>面对不断变化的网络条件或意外事件而不健壮的系统是在分布式生产环境中不能很好地运行的系统。</p><p>NSQ 的设计和实现方式允许系统容忍故障并以一致，可预测和不令人惊讶的方式运行。</p><p>最重要的理念是快速失败，将错误视为致命错误，并提供调试确实发生的任何问题的方法。</p><p>但是，为了做出反应，你需要能够发现异常情况......</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="心跳和超时">心跳和超时<a href="#心跳和超时" class="hash-link" aria-label="心跳和超时的直接链接" title="心跳和超时的直接链接">​</a></h3><p>NSQ TCP 协议是面向推送的。在连接，握手和订阅之后，消费者处于 RDY 状态 0.当消费者准备好接收消息时，它将该 RDY 状态更新为它愿意接受的消息的数量。 NSQ 客户端库在后台不断地管理它，从而产生流控制的消息流。</p><p>nsqd 会定期通过连接发送心跳。客户端可以配置心跳之间的间隔，但 nsqd 在发送下一个之前需要响应。</p><p>应用程序级心跳和 RDY 状态的组合避免了行头阻塞，否则会导致心跳无效（即，如果消费者在处理消息流时落后于 OS 的接收缓冲区将填满，阻止心跳）。</p><p>为了保证进度，所有网络 IO 都与相对于配置的心跳间隔的截止时间绑定。这意味着你可以从字面上拔掉 nsqd 和消费者之间的网络连接，它将检测并正确处理错误。</p><p>检测到致命错误时，强制关闭客户端连接。正在进行的消息超时并重新排队以便传递给另一个消费者。最后，记录错误并增加各种内部指标。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="管理-goroutines">管理 Goroutines<a href="#管理-goroutines" class="hash-link" aria-label="管理 Goroutines的直接链接" title="管理 Goroutines的直接链接">​</a></h3><p>启动 goroutines 非常容易。 不幸的是，编排清理工作并不容易。 避免死锁也具有挑战性。 大多数情况下，这归结为一个排序问题，在上游 goroutines 发送它之前，在 go-chan 上接收的 goroutine 退出。</p><p>为什么要关心呢？ 这很简单，孤立的 goroutine 是一个内存泄漏。 长时间运行的守护进程中的内存泄漏是不好的，特别是当期望您的进程在其他所有失败时都将保持稳定时。</p><p>更复杂的是，典型的 nsqd 进程在消息传递中涉及许多 goroutine。 在内部，消息“所有权”经常发生变化。 为了能够干净地关闭，考虑所有进程内消息非常重要。</p><p>虽然没有任何魔法子弹，但以下技术使其更容易管理......</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="waitgroups">WaitGroups<a href="#waitgroups" class="hash-link" aria-label="WaitGroups的直接链接" title="WaitGroups的直接链接">​</a></h4><p>同步包提供了 sync.WaitGroup，可用于执行有多少 goroutine 的实时计算（并提供等待退出的方法）。</p><p>为了减少典型的样板，nsqd 使用这个包装器：</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">type WaitGroupWrapper struct {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sync.WaitGroup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func (w *WaitGroupWrapper) Wrap(cb func()) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    w.Add(1)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    go func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        cb()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        w.Done()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// can be used as follows:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wg := WaitGroupWrapper{}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wg.Wrap(func() { n.idPump() })</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">wg.Wait()</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="退出信号">退出信号<a href="#退出信号" class="hash-link" aria-label="退出信号的直接链接" title="退出信号的直接链接">​</a></h4><p>在多个子 goroutine 中触发事件的最简单方法是提供一个在准备就绪时关闭的 go-chan。 在该 go-chan 上的所有未决接收将被激活，而不是必须向每个 goroutine 发送单独的信号。</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">func work() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    exitChan := make(chan int)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    go task1(exitChan)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    go task2(exitChan)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time.Sleep(5 * time.Second)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    close(exitChan)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func task1(exitChan chan int) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;-exitChan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    log.Printf("task1 exiting")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">func task2(exitChan chan int) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;-exitChan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    log.Printf("task2 exiting")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="同步退出">同步退出<a href="#同步退出" class="hash-link" aria-label="同步退出的直接链接" title="同步退出的直接链接">​</a></h4><p>实现一个可靠的，无死锁的退出路径非常难以解决所有正在进行的消息。 一些提示：</p><ol><li><p>理想情况下，负责发送 go-chan 的 goroutine 也应该负责关闭它。</p></li><li><p>如果消息不能丢失，请确保清空相关的 go-chans（特别是无缓冲的！）以保证发送者可以取得进展。</p></li><li><p>或者，如果消息不再相关，则应将单个 go-chan 上的发送转换为选择，并添加退出信号（如上所述）以保证进度。</p></li><li><p>一般顺序应该是：</p></li><li><ol><li>停止接受新连接（关闭侦听器）</li><li>信号退出子 goroutines（见上文）</li><li>在 WaitGroup 上等待 goroutine 退出（见上文）</li><li>恢复缓冲的数据</li><li>刷新留在磁盘上的任何东西</li></ol></li></ol><h4 class="anchor anchorWithStickyNavbar_LWe7" id="日志">日志<a href="#日志" class="hash-link" aria-label="日志的直接链接" title="日志的直接链接">​</a></h4><p>最后，可以使用的最重要的工具是记录的 goroutines 的入口和出口！ 它使得在死锁或泄漏的情况下识别罪魁祸首变得更加容易。</p><p>nsqd 日志行包括将 goroutine 与其兄弟（和父级）相关联的信息，例如客户端的远程地址或主题/通道名称。</p><p>日志是冗长的，但并不详细到日志压倒性的程度。 有一条细线，但 nsqd 倾向于在发生故障时在日志中提供更多信息，而不是试图以牺牲实用性为代价来减少干扰。</p>]]></content:encoded>
            <category>nsq</category>
            <category>mq</category>
        </item>
        <item>
            <title><![CDATA[Gogs 在 Docker 下的部署]]></title>
            <link>https://nekobox69.github.io/blog/tech/Gogs在Docker下的部署</link>
            <guid>https://nekobox69.github.io/blog/tech/Gogs在Docker下的部署</guid>
            <pubDate>Tue, 30 Jun 2020 05:09:37 GMT</pubDate>
            <description><![CDATA[Gogs]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="gogs">Gogs<a href="#gogs" class="hash-link" aria-label="Gogs的直接链接" title="Gogs的直接链接">​</a></h2><p>Gogs 是一款极易搭建的自助 Git 服务。</p><p>Gogs 是用 Go 语言开发的，最简单、最快速和最轻松的方式搭建自助 Git 服务。</p><ul><li><p>易安装</p><p>除了可以根据操作系统平台通过 <a href="https://gogs.io/docs/installation/install_from_binary.html" target="_blank" rel="noopener noreferrer" title="二进制运行">二进制运行</a>，还可以通过 <a href="https://github.com/gogits/gogs/tree/master/docker" target="_blank" rel="noopener noreferrer" title="Docker 安装">Docker</a> 或 <a href="https://github.com/geerlingguy/ansible-vagrant-examples/tree/master/gogs" target="_blank" rel="noopener noreferrer" title="Vagrant 安装">Vagrant</a>，以及 <a href="https://gogs.io/docs/installation/install_from_packages.html" target="_blank" rel="noopener noreferrer" title="包管理">包管理</a> 安装。</p></li><li><p>跨平台</p><p>任何 Go 语言支持的平台都可以运行 Gogs，包括 Windows、Mac、Linux 以及 ARM。</p></li><li><p>轻量级</p><p>一个廉价的树莓派的配置足以满足 Gogs 的最低系统硬件要求。最大程度上节省服务器资源</p></li><li><p>开源化</p><p>所有的代码都开源在 <a href="https://github.com/gogits/gogs/" target="_blank" rel="noopener noreferrer" title="Gogs">GitHub</a> 上</p></li></ul><p>并且支持多种数据库，例如 MySQL、MSSQL、SQLite3 等。本文就以 Mysql 及 SQLite3 为例，介绍下部署配置。下面都以 docker-compose 方式部署，安装方法见<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener noreferrer" title="Docker Compose">官网</a>。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="gogs--mysql">Gogs + MySQL<a href="#gogs--mysql" class="hash-link" aria-label="Gogs + MySQL的直接链接" title="Gogs + MySQL的直接链接">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-配置文件">1. 配置文件<a href="#1-配置文件" class="hash-link" aria-label="1. 配置文件的直接链接" title="1. 配置文件的直接链接">​</a></h3><p><code>docker-compose.yml</code></p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">gogs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> always </span><span class="token comment" style="color:#999988;font-style:italic"># 自动重启</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs/gogs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"6022:22"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># ssh 端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"6023:3000"</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># Web 访问端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./gogs</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">/data </span><span class="token comment" style="color:#999988;font-style:italic"># 数据存储</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">depends_on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> always</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">123456</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs </span><span class="token comment" style="color:#999988;font-style:italic"># gogs 访问数据库用的账号</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs123456</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"6006:3306"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./conf/my.cnf</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">/etc/mysql/my.cnf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">/var/lib/mysql</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> /etc/localtime</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">/etc/localtime</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">ro</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># 一般会对 MySQL 进行配置，所以上面采用了 cnf 文件的形式，如果只是修改字符集，也可以使用 command 的形式，如下面所示</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>my.cnf</code></p><div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[client]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default-character-set=utf8mb4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[mysql]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default-character-set=utf8mb4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[mysqld]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">character-set-server=utf8mb4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">collation-server=utf8mb4_unicode_ci</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><blockquote><p>注意：<code>MYSQL_USER</code> 并非必须，安装页面会要求输入用户名，如果没有配置 MYSQL_USER ，也可以用 root 账户，此时记得设置 <code>MYSQL_ROOT_PASSWORD</code>。</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-部署">2. 部署<a href="#2-部署" class="hash-link" aria-label="2. 部署的直接链接" title="2. 部署的直接链接">​</a></h3><p>拷贝上述文件到服务器上</p><p>然后执行<code>docker-compose up -d</code>，会自动拉取镜像，并启动容器。</p><p>如果不是用<code>root</code>访问数据库，就先不急着打开浏览器安装 Gogs，先用 <code>HediSQL</code>（访问数据库工具）打开数据库，赋予<code>gogs</code>用户远程访问权限，否则安装是会报错。</p><p><code>数据库设置不正确：Error 1044: Access denied for user 'gogs'@'%' to database 'gogs'</code>，就是没有给<code>gogs</code>访问权限。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2020/jpeg/402881/1587383720318-15f19c41-86ff-44be-9d7a-89b5c33cf67b.jpeg" class="img_ev3q"></p><p>还需要自己创建个数据库，例如：<code>gogs</code>（Gogs 能自动创建更好）。</p><p>配置好数据库权限后，用浏览器打开<code>http://ip:6023</code>进行 Gogs 的安装。</p><p>需要修改的内容：</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">数据库主机</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">3306</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">数据库用户</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">数据库用户密码</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ••••••••••</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">域名</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> localhost </span><span class="token comment" style="color:#999988;font-style:italic"># 改成自己的</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">SSH 端口号</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6022</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">HTTP 端口号</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6023</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">应用 URL</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> http</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//localhost</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">6023/</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2020/jpeg/402881/1587384049043-ef1ac310-c913-436d-aa8e-99d05ab5a823.jpeg" class="img_ev3q"></p><p>安装上述配置好后，点击<code>立即安装</code>，就大功告成了。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2020/jpeg/402881/1587384662318-3cfa16a9-2707-4324-9f8b-ccc001110ae8.jpeg" class="img_ev3q"></p><blockquote><p>可选设置中，可以禁用注册功能，在禁用注册功能时需要配置管理员账号。</p><p>PS：管理员账号不能为<code>admin</code>，会报错</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="gogs--sqlite3">Gogs + SQLite3<a href="#gogs--sqlite3" class="hash-link" aria-label="Gogs + SQLite3的直接链接" title="Gogs + SQLite3的直接链接">​</a></h2><p>方式就更简单了</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-配置文件-1">1. 配置文件<a href="#1-配置文件-1" class="hash-link" aria-label="1. 配置文件的直接链接" title="1. 配置文件的直接链接">​</a></h3><p><code>docker-compose.yml</code></p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">gogs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">restart</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> always    </span><span class="token comment" style="color:#999988;font-style:italic"># 自动重启</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs/gogs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">container_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> gogs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'6022:22'</span><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># ssh 端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'6023:3000'</span><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Web 访问端口</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">volumes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ./gogs</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">/data   </span><span class="token comment" style="color:#999988;font-style:italic"># 数据存储</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-部署-1">2. 部署<a href="#2-部署-1" class="hash-link" aria-label="2. 部署的直接链接" title="2. 部署的直接链接">​</a></h3><p>拷贝上述文件到服务器上</p><p>然后执行<code>docker-compose up -d</code>，会自动拉取镜像，并启动容器。</p><p>用浏览器打开<code>http://ip:6023</code>进行 Gogs 的安装。记得修改端口和域名，然后点击安装就可以了。</p><p><img loading="lazy" src="https://cdn.nlark.com/yuque/0/2020/jpeg/402881/1587384996036-e8ad0f2d-02d5-493a-bedf-79651c0f1924.jpeg" class="img_ev3q"></p>]]></content:encoded>
            <category>gogs</category>
            <category>docker</category>
            <category>devops</category>
            <category>git</category>
        </item>
    </channel>
</rss>